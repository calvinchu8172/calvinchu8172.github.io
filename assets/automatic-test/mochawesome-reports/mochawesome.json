{
  "reportTitle": "object-storage-service",
  "reportPageTitle": "Mochawesome Report Card",
  "stats": {
    "suites": 190,
    "tests": 167,
    "passes": 163,
    "pending": 0,
    "failures": 4,
    "start": "2017-07-12T03:28:43.078Z",
    "end": "2017-07-12T03:36:01.933Z",
    "duration": 438855,
    "testsRegistered": 167,
    "passPercent": 97.6,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "OSS_003: Create Domain API",
        "suites": [
          {
            "title": "OSS_003_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1382,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "13e93749-c331-4f97-8ce0-19dea49c83ae",
                "parentUUID": "fffc2692-639d-40dc-86e2-614d60a9dd96",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "fffc2692-639d-40dc-86e2-614d60a9dd96",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1382,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "13e93749-c331-4f97-8ce0-19dea49c83ae",
                "parentUUID": "fffc2692-639d-40dc-86e2-614d60a9dd96",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1382
          },
          {
            "title": "OSS_003_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "975c5bab-8702-453c-b8b1-82af509e8788",
                "parentUUID": "57ce8a5e-03f5-4bfb-b60a-8a6ab73cfcd1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "57ce8a5e-03f5-4bfb-b60a-8a6ab73cfcd1",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "975c5bab-8702-453c-b8b1-82af509e8788",
                "parentUUID": "57ce8a5e-03f5-4bfb-b60a-8a6ab73cfcd1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1230
          },
          {
            "title": "OSS_003_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 763,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0b584c8c-0065-4fed-8df7-c508aea7c844",
                "parentUUID": "f999dcc4-9444-4d5f-89a9-b07e7c8329ad",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "f999dcc4-9444-4d5f-89a9-b07e7c8329ad",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 763,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0b584c8c-0065-4fed-8df7-c508aea7c844",
                "parentUUID": "f999dcc4-9444-4d5f-89a9-b07e7c8329ad",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 763
          },
          {
            "title": "OSS_003_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3bbdcea8-7fde-4ed0-b421-4196649fc44b",
                "parentUUID": "034a917e-7e67-4eb0-af83-cfefd934a77a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "034a917e-7e67-4eb0-af83-cfefd934a77a",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3bbdcea8-7fde-4ed0-b421-4196649fc44b",
                "parentUUID": "034a917e-7e67-4eb0-af83-cfefd934a77a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 759
          },
          {
            "title": "OSS_003_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 467,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2d4dde37-6cf1-429b-969a-6e7d87a9eef6",
                "parentUUID": "9e5aa14d-3750-4b0b-b75d-04943a8c0cf7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "9e5aa14d-3750-4b0b-b75d-04943a8c0cf7",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 467,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2d4dde37-6cf1-429b-969a-6e7d87a9eef6",
                "parentUUID": "9e5aa14d-3750-4b0b-b75d-04943a8c0cf7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 467
          },
          {
            "title": "OSS_003_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 2641,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9c8e9237-3e5a-42b6-af20-05d1b00a337d",
                "parentUUID": "ffa1b817-9798-4fdd-bb31-73e63710bf45",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "ffa1b817-9798-4fdd-bb31-73e63710bf45",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 2641,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9c8e9237-3e5a-42b6-af20-05d1b00a337d",
                "parentUUID": "ffa1b817-9798-4fdd-bb31-73e63710bf45",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2641
          },
          {
            "title": "OSS_003_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "82d536f8-9b29-42a3-822f-2a9ba7f5693f",
                "parentUUID": "2fc2f46b-6e01-4a49-b05b-30a7be72dfb3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "2fc2f46b-6e01-4a49-b05b-30a7be72dfb3",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "82d536f8-9b29-42a3-822f-2a9ba7f5693f",
                "parentUUID": "2fc2f46b-6e01-4a49-b05b-30a7be72dfb3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 615
          },
          {
            "title": "OSS_003_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9a741ccf-0403-45f5-9dfd-e0807681fefb",
                "parentUUID": "d19bd25f-c760-4f01-aad7-c7c9cbe25a85",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "d19bd25f-c760-4f01-aad7-c7c9cbe25a85",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9a741ccf-0403-45f5-9dfd-e0807681fefb",
                "parentUUID": "d19bd25f-c760-4f01-aad7-c7c9cbe25a85",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1681
          },
          {
            "title": "OSS_003_09: If the domain param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_09: If the domain param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
                "timedOut": false,
                "duration": 1132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.domain;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f329cf9c-1416-4076-98b3-ef9b72865e7a",
                "parentUUID": "a0f7fd86-b81d-4b5d-baf1-3659e7f223c4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "a0f7fd86-b81d-4b5d-baf1-3659e7f223c4",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_09: If the domain param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
                "timedOut": false,
                "duration": 1132,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.domain;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f329cf9c-1416-4076-98b3-ef9b72865e7a",
                "parentUUID": "a0f7fd86-b81d-4b5d-baf1-3659e7f223c4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1132
          },
          {
            "title": "OSS_003_10: If the domain param is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 369,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.domain = <span class=\"hljs-string\">'111_test_domain_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "a276e544-a756-43a0-ac44-7f966cd92e0a",
                    "parentUUID": "f2ed5e83-554d-4e94-843f-3e4b2e9d401f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createDomain.js",
                "uuid": "f2ed5e83-554d-4e94-843f-3e4b2e9d401f",
                "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 369,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.domain = <span class=\"hljs-string\">'111_test_domain_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "a276e544-a756-43a0-ac44-7f966cd92e0a",
                    "parentUUID": "f2ed5e83-554d-4e94-843f-3e4b2e9d401f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 369
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1200,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.domain = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5981f029-9765-4520-8b48-b9e286d43eeb",
                    "parentUUID": "68a78a62-4923-4438-8351-747f515f7794",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createDomain.js",
                "uuid": "68a78a62-4923-4438-8351-747f515f7794",
                "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1200,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.domain = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5981f029-9765-4520-8b48-b9e286d43eeb",
                    "parentUUID": "68a78a62-4923-4438-8351-747f515f7794",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1200
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 735,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.form.domain = invalid_domain_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "d6101e6b-6119-4a0f-8940-f5e9c297a8b3",
                    "parentUUID": "56888708-af84-4e08-bd3b-7721cc725811",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createDomain.js",
                "uuid": "56888708-af84-4e08-bd3b-7721cc725811",
                "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_003_10: If the domain param is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 735,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.form.domain = invalid_domain_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "d6101e6b-6119-4a0f-8940-f5e9c297a8b3",
                    "parentUUID": "56888708-af84-4e08-bd3b-7721cc725811",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 735
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "4a3568ea-f38b-488a-9069-f01a440eff6a",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_003_11: If the domain already exists.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_11: If the domain already exists. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "timedOut": false,
                "duration": 1003,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ff31e646-195a-4f96-b01e-fd96805e902d",
                "parentUUID": "a0ec5ee0-4c3a-4452-8310-02daa47d26ae",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "a0ec5ee0-4c3a-4452-8310-02daa47d26ae",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_11: If the domain already exists. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "timedOut": false,
                "duration": 1003,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ff31e646-195a-4f96-b01e-fd96805e902d",
                "parentUUID": "a0ec5ee0-4c3a-4452-8310-02daa47d26ae",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1003
          },
          {
            "title": "OSS_003_12: If it has already reached 2 domains limit.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_12: If it has already reached 2 domains limit. Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
                "timedOut": false,
                "duration": 2220,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_limit.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_limit.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aeb2d43e-f7e2-43e5-8081-94ce87d0c726",
                "parentUUID": "55b703f4-437d-4a39-8798-1c9a068ba1ac",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "55b703f4-437d-4a39-8798-1c9a068ba1ac",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_12: If it has already reached 2 domains limit. Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
                "timedOut": false,
                "duration": 2220,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_limit.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_limit.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aeb2d43e-f7e2-43e5-8081-94ce87d0c726",
                "parentUUID": "55b703f4-437d-4a39-8798-1c9a068ba1ac",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2220
          },
          {
            "title": "OSS_003_13: Successfully created domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_13: Successfully created domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 5481,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> createDomains = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`create domains .....`</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      createDomains()<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>            testHelper.getDomain(cloud_id, app_id, options.form.domain, (err, domain) =&gt; {<br>              <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> reject(err);<br>              <span class=\"hljs-built_in\">console</span>.log(domain);<br>              expect(domain).to.have.all.keys([<br>                <span class=\"hljs-string\">'cloud_id-app_id'</span>,<br>                <span class=\"hljs-string\">'name'</span>,<br>                <span class=\"hljs-string\">'app_id'</span>,<br>                <span class=\"hljs-string\">'created_at'</span>,<br>                <span class=\"hljs-string\">'created_by'</span>,<br>                <span class=\"hljs-string\">'file_usage'</span>,<br>                <span class=\"hljs-string\">'id'</span>,<br>                <span class=\"hljs-string\">'json_usage'</span>,<br>                <span class=\"hljs-string\">'updated_at'</span>,<br>                <span class=\"hljs-string\">'updated_by'</span><br>              ]);<br>              customs.domain_id = domain.id;<br>              expect(domain[<span class=\"hljs-string\">'cloud_id-app_id'</span>]).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cloud_id}</span>-<span class=\"hljs-subst\">${app_id}</span>`</span>);<br>              expect(domain.name).to.equal(domain_name);<br>              resolve();<br>            }); <span class=\"hljs-comment\">// getDomain</span><br>          }); <span class=\"hljs-comment\">// Promise</span><br>        })<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
                "isRoot": false,
                "uuid": "15a9c97c-4417-4878-9ee4-d3e625874577",
                "parentUUID": "258116e0-b8b2-4e1b-abf8-596139b1a45c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createDomain.js",
            "uuid": "258116e0-b8b2-4e1b-abf8-596139b1a45c",
            "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_003: Create Domain API OSS_003_13: Successfully created domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 5481,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> createDomains = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`create domains .....`</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      createDomains()<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>            testHelper.getDomain(cloud_id, app_id, options.form.domain, (err, domain) =&gt; {<br>              <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> reject(err);<br>              <span class=\"hljs-built_in\">console</span>.log(domain);<br>              expect(domain).to.have.all.keys([<br>                <span class=\"hljs-string\">'cloud_id-app_id'</span>,<br>                <span class=\"hljs-string\">'name'</span>,<br>                <span class=\"hljs-string\">'app_id'</span>,<br>                <span class=\"hljs-string\">'created_at'</span>,<br>                <span class=\"hljs-string\">'created_by'</span>,<br>                <span class=\"hljs-string\">'file_usage'</span>,<br>                <span class=\"hljs-string\">'id'</span>,<br>                <span class=\"hljs-string\">'json_usage'</span>,<br>                <span class=\"hljs-string\">'updated_at'</span>,<br>                <span class=\"hljs-string\">'updated_by'</span><br>              ]);<br>              customs.domain_id = domain.id;<br>              expect(domain[<span class=\"hljs-string\">'cloud_id-app_id'</span>]).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cloud_id}</span>-<span class=\"hljs-subst\">${app_id}</span>`</span>);<br>              expect(domain.name).to.equal(domain_name);<br>              resolve();<br>            }); <span class=\"hljs-comment\">// getDomain</span><br>          }); <span class=\"hljs-comment\">// Promise</span><br>        })<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
                "isRoot": false,
                "uuid": "15a9c97c-4417-4878-9ee4-d3e625874577",
                "parentUUID": "258116e0-b8b2-4e1b-abf8-596139b1a45c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5481
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/createDomain.js",
        "uuid": "129246c8-83b4-4d39-af7b-613e10709a16",
        "fullFile": "/vagrant/object-storage-service/test/createDomain.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_010: Update Domain API",
        "suites": [
          {
            "title": "OSS_010_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1503,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "83b1e696-7ad8-47a9-be32-30f38b24d2a8",
                "parentUUID": "fe74adf0-e27b-43e2-b55d-851d36b6c33b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "fe74adf0-e27b-43e2-b55d-851d36b6c33b",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1503,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "83b1e696-7ad8-47a9-be32-30f38b24d2a8",
                "parentUUID": "fe74adf0-e27b-43e2-b55d-851d36b6c33b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1503
          },
          {
            "title": "OSS_010_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 611,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f867a648-ceec-40e6-9d53-4e68b79b5aac",
                "parentUUID": "5d83e199-ca97-4fbd-abc8-f3b23e50493c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "5d83e199-ca97-4fbd-abc8-f3b23e50493c",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 611,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f867a648-ceec-40e6-9d53-4e68b79b5aac",
                "parentUUID": "5d83e199-ca97-4fbd-abc8-f3b23e50493c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 611
          },
          {
            "title": "OSS_010_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1878,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "226ae008-c0e3-437d-9953-3eb5a2e43513",
                "parentUUID": "57d371a4-4b72-4061-99af-e835f683ac07",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "57d371a4-4b72-4061-99af-e835f683ac07",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1878,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "226ae008-c0e3-437d-9953-3eb5a2e43513",
                "parentUUID": "57d371a4-4b72-4061-99af-e835f683ac07",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1878
          },
          {
            "title": "OSS_010_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1997,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bc14132c-c68f-41d6-9304-47f0ad86a84c",
                "parentUUID": "e56f3be0-f9d1-4f4f-bcf0-45236e9a2864",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "e56f3be0-f9d1-4f4f-bcf0-45236e9a2864",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1997,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bc14132c-c68f-41d6-9304-47f0ad86a84c",
                "parentUUID": "e56f3be0-f9d1-4f4f-bcf0-45236e9a2864",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1997
          },
          {
            "title": "OSS_010_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f05806ee-4e7f-4da2-a51e-8340da509e63",
                "parentUUID": "61b255d9-882e-4d18-9935-2c7c739582e6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "61b255d9-882e-4d18-9935-2c7c739582e6",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f05806ee-4e7f-4da2-a51e-8340da509e63",
                "parentUUID": "61b255d9-882e-4d18-9935-2c7c739582e6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1379
          },
          {
            "title": "OSS_010_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 727,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e02a7386-3d4a-4bdc-8381-59f662d5a55c",
                "parentUUID": "5c141c72-2bc8-483c-8198-52d985d0a2f2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "5c141c72-2bc8-483c-8198-52d985d0a2f2",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 727,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e02a7386-3d4a-4bdc-8381-59f662d5a55c",
                "parentUUID": "5c141c72-2bc8-483c-8198-52d985d0a2f2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 727
          },
          {
            "title": "OSS_010_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "29be2769-7370-493d-a6ac-a9dcb9ec1b5a",
                "parentUUID": "9b0dbfc9-b3f0-4f46-8865-3d39624d1469",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "9b0dbfc9-b3f0-4f46-8865-3d39624d1469",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "29be2769-7370-493d-a6ac-a9dcb9ec1b5a",
                "parentUUID": "9b0dbfc9-b3f0-4f46-8865-3d39624d1469",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1381
          },
          {
            "title": "OSS_010_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a9fa14d6-0a5a-42a2-8cc4-7be96cc539a9",
                "parentUUID": "1f27972b-dbdb-49c9-b73b-46e8326df8a4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "1f27972b-dbdb-49c9-b73b-46e8326df8a4",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1362,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a9fa14d6-0a5a-42a2-8cc4-7be96cc539a9",
                "parentUUID": "1f27972b-dbdb-49c9-b73b-46e8326df8a4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1362
          },
          {
            "title": "OSS_010_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 764,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "1817c06f-8d73-4863-acca-36fae5065343",
                    "parentUUID": "a3de6cc0-41b6-4a97-aba8-e80ac291eaa8",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "a3de6cc0-41b6-4a97-aba8-e80ac291eaa8",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 764,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "1817c06f-8d73-4863-acca-36fae5065343",
                    "parentUUID": "a3de6cc0-41b6-4a97-aba8-e80ac291eaa8",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 764
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 414,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "41946f90-23d7-46fe-bdd9-371fa0190327",
                    "parentUUID": "77ff0794-f93e-4245-bf8f-a3a3e2b116c5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "77ff0794-f93e-4245-bf8f-a3a3e2b116c5",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 414,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "41946f90-23d7-46fe-bdd9-371fa0190327",
                    "parentUUID": "77ff0794-f93e-4245-bf8f-a3a3e2b116c5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 414
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 769,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "386d8162-3fd7-4cb3-a5bb-b7cdc5c15b6b",
                    "parentUUID": "00f3d8e8-f1c1-4fad-89cd-b3d1d3567f64",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "00f3d8e8-f1c1-4fad-89cd-b3d1d3567f64",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_010_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 769,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "386d8162-3fd7-4cb3-a5bb-b7cdc5c15b6b",
                    "parentUUID": "00f3d8e8-f1c1-4fad-89cd-b3d1d3567f64",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 769
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "e35ffbf3-8d6b-4e23-82b1-15a760f69acb",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_010_10: If the new domain param is invalid.",
            "suites": [
              {
                "title": "Invalid new domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 380,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_domain = <span class=\"hljs-string\">'111_invalid_new_domain_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "160c09a0-b4a5-4c3a-af9c-23f71ddac8e6",
                    "parentUUID": "3608933e-d7e1-4514-827b-4c15752d7800",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "3608933e-d7e1-4514-827b-4c15752d7800",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 380,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_domain = <span class=\"hljs-string\">'111_invalid_new_domain_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "160c09a0-b4a5-4c3a-af9c-23f71ddac8e6",
                    "parentUUID": "3608933e-d7e1-4514-827b-4c15752d7800",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 380
              },
              {
                "title": "Invalid new domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 1534,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_domain = <span class=\"hljs-string\">'invalid_new_domain_*_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "e147b65a-dcf2-4840-bcf4-ce93f25d51e3",
                    "parentUUID": "ccf78d7b-4260-4024-b4a6-0a796f5bf2eb",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "ccf78d7b-4260-4024-b4a6-0a796f5bf2eb",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 1534,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_domain = <span class=\"hljs-string\">'invalid_new_domain_*_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "e147b65a-dcf2-4840-bcf4-ce93f25d51e3",
                    "parentUUID": "ccf78d7b-4260-4024-b4a6-0a796f5bf2eb",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1534
              },
              {
                "title": "Invalid new domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 759,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_new_domain_name = new_domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_new_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_new_domain_name += (<span class=\"hljs-string\">'_'</span> + new_domain_name);<br>        }<br>        options.form.new_domain = invalid_new_domain_name;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "a1c9479f-4632-4342-b281-0b5488c5ae29",
                    "parentUUID": "a9203e6c-6fef-4c9a-97a6-5da26eb15bca",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateDomain.js",
                "uuid": "a9203e6c-6fef-4c9a-97a6-5da26eb15bca",
                "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "fullTitle": "OSS_010_10: If the new domain param is invalid. Invalid new domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
                    "timedOut": false,
                    "duration": 759,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_new_domain_name = new_domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_new_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_new_domain_name += (<span class=\"hljs-string\">'_'</span> + new_domain_name);<br>        }<br>        options.form.new_domain = invalid_new_domain_name;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "a1c9479f-4632-4342-b281-0b5488c5ae29",
                    "parentUUID": "a9203e6c-6fef-4c9a-97a6-5da26eb15bca",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 759
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "33335cdf-a3c0-4f66-a119-63a976f368ea",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_010_11: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "35889211-3fdb-4f75-8afb-10e5f7a66ea9",
                "parentUUID": "847ecf7f-8ee0-4113-822a-6ca6f3db7aba",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "847ecf7f-8ee0-4113-822a-6ca6f3db7aba",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "35889211-3fdb-4f75-8afb-10e5f7a66ea9",
                "parentUUID": "847ecf7f-8ee0-4113-822a-6ca6f3db7aba",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1293
          },
          {
            "title": "OSS_010_12: Cannot update domain item. New domain has already exist.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_12: Cannot update domain item. New domain has already exist. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "timedOut": false,
                "duration": 1037,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ca4a3614-2e0d-40d2-a3c2-72ca6cae5f13",
                "parentUUID": "edbfbf24-88c3-4168-b157-ed4cac14285a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "edbfbf24-88c3-4168-b157-ed4cac14285a",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_12: Cannot update domain item. New domain has already exist. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
                "timedOut": false,
                "duration": 1037,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ca4a3614-2e0d-40d2-a3c2-72ca6cae5f13",
                "parentUUID": "edbfbf24-88c3-4168-b157-ed4cac14285a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1037
          },
          {
            "title": "OSS_010_13: Successfully updated domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_13: Successfully updated domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2317,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> updateDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>updateDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, new_domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">false</span>);<br>          expect(data.id).to.equal(domain_id);<br>          expect(data.name).to.equal(new_domain_name);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "84f93f1e-c981-44a8-9d07-9ca9834f2cd4",
                "parentUUID": "0432934f-9b13-4488-ad33-93770c64aecc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateDomain.js",
            "uuid": "0432934f-9b13-4488-ad33-93770c64aecc",
            "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_010: Update Domain API OSS_010_13: Successfully updated domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2317,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> updateDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>updateDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, new_domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">false</span>);<br>          expect(data.id).to.equal(domain_id);<br>          expect(data.name).to.equal(new_domain_name);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "84f93f1e-c981-44a8-9d07-9ca9834f2cd4",
                "parentUUID": "0432934f-9b13-4488-ad33-93770c64aecc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2317
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/updateDomain.js",
        "uuid": "15083497-f5a7-4725-aafb-984bbb2c22ad",
        "fullFile": "/vagrant/object-storage-service/test/updateDomain.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_006: Get Domain API",
        "suites": [
          {
            "title": "OSS_006_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ff6f0e8d-4dc5-456e-90eb-7cf7ac0eba08",
                "parentUUID": "6ca33348-5763-4a1d-a992-8835d3bb5d38",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "6ca33348-5763-4a1d-a992-8835d3bb5d38",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ff6f0e8d-4dc5-456e-90eb-7cf7ac0eba08",
                "parentUUID": "6ca33348-5763-4a1d-a992-8835d3bb5d38",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 278
          },
          {
            "title": "OSS_006_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 781,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "59f9ae60-e895-4ad3-81a6-29bdee4518c5",
                "parentUUID": "cca49df5-cb8f-4a88-ab5b-0517c6273170",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "cca49df5-cb8f-4a88-ab5b-0517c6273170",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 781,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "59f9ae60-e895-4ad3-81a6-29bdee4518c5",
                "parentUUID": "cca49df5-cb8f-4a88-ab5b-0517c6273170",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 781
          },
          {
            "title": "OSS_006_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 658,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7ad6883e-cb2f-44d8-9d12-0099b7822348",
                "parentUUID": "0bb1c158-f266-4abc-98f6-f9fad6b74709",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "0bb1c158-f266-4abc-98f6-f9fad6b74709",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 658,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7ad6883e-cb2f-44d8-9d12-0099b7822348",
                "parentUUID": "0bb1c158-f266-4abc-98f6-f9fad6b74709",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 658
          },
          {
            "title": "OSS_006_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 334,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2e57a093-6e39-4ccc-b5f8-1766020c079d",
                "parentUUID": "11b1c835-d983-4802-8694-96d34b1a50e5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "11b1c835-d983-4802-8694-96d34b1a50e5",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 334,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2e57a093-6e39-4ccc-b5f8-1766020c079d",
                "parentUUID": "11b1c835-d983-4802-8694-96d34b1a50e5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 334
          },
          {
            "title": "OSS_006_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "971e64fa-2713-487e-a0cd-a84a07f779cc",
                "parentUUID": "ab268227-931a-4137-9eba-31f836fa126b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "ab268227-931a-4137-9eba-31f836fa126b",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "971e64fa-2713-487e-a0cd-a84a07f779cc",
                "parentUUID": "ab268227-931a-4137-9eba-31f836fa126b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 302
          },
          {
            "title": "OSS_006_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 337,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7eb8c919-3497-4478-b5f0-0b006ed6b1b1",
                "parentUUID": "b8e8b68e-1cb3-4058-9331-4aaf39532953",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "b8e8b68e-1cb3-4058-9331-4aaf39532953",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 337,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7eb8c919-3497-4478-b5f0-0b006ed6b1b1",
                "parentUUID": "b8e8b68e-1cb3-4058-9331-4aaf39532953",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 337
          },
          {
            "title": "OSS_006_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 475,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a80f2039-65ea-4e89-94da-910a86c708fc",
                "parentUUID": "e9121994-1d3d-44d5-86d8-49dcdf0f88cc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "e9121994-1d3d-44d5-86d8-49dcdf0f88cc",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 475,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a80f2039-65ea-4e89-94da-910a86c708fc",
                "parentUUID": "e9121994-1d3d-44d5-86d8-49dcdf0f88cc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 475
          },
          {
            "title": "OSS_006_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d30c4444-c559-45e9-bd09-3898c8343352",
                "parentUUID": "26d1d20c-60bb-4d83-b33a-b87ebcfafb41",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "26d1d20c-60bb-4d83-b33a-b87ebcfafb41",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1636,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d30c4444-c559-45e9-bd09-3898c8343352",
                "parentUUID": "26d1d20c-60bb-4d83-b33a-b87ebcfafb41",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1636
          },
          {
            "title": "OSS_006_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 334,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5693700e-83ec-463c-8809-c5347db1e068",
                    "parentUUID": "5700b24f-d335-444a-aa4c-9ba451ead634",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getDomain.js",
                "uuid": "5700b24f-d335-444a-aa4c-9ba451ead634",
                "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 334,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5693700e-83ec-463c-8809-c5347db1e068",
                    "parentUUID": "5700b24f-d335-444a-aa4c-9ba451ead634",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 334
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1401,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "6098a412-eb5e-4dc3-9142-39c2eeefa809",
                    "parentUUID": "87037c31-dfbb-40a6-8f9b-bef088e04e4e",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getDomain.js",
                "uuid": "87037c31-dfbb-40a6-8f9b-bef088e04e4e",
                "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1401,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "6098a412-eb5e-4dc3-9142-39c2eeefa809",
                    "parentUUID": "87037c31-dfbb-40a6-8f9b-bef088e04e4e",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1401
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1803,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "03afa5f4-2fe2-4f56-b5b6-ac3f21e4cd9b",
                    "parentUUID": "708e6086-1fa3-493c-a853-7d6335cd2f85",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getDomain.js",
                "uuid": "708e6086-1fa3-493c-a853-7d6335cd2f85",
                "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_006_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1803,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "03afa5f4-2fe2-4f56-b5b6-ac3f21e4cd9b",
                    "parentUUID": "708e6086-1fa3-493c-a853-7d6335cd2f85",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1803
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "7e0a5487-bde9-4297-ade0-cea86037b1f5",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_006_10: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 2204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain_name'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e328339a-251e-42b0-92f8-a12834510ae2",
                "parentUUID": "cc013bab-836b-4a91-be56-42368e9ae5b6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "cc013bab-836b-4a91-be56-42368e9ae5b6",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 2204,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain_name'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e328339a-251e-42b0-92f8-a12834510ae2",
                "parentUUID": "cc013bab-836b-4a91-be56-42368e9ae5b6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2204
          },
          {
            "title": "OSS_006_11: Successfully got domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_11: Successfully got domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "df421764-4048-41d8-ab78-b1009e72d896",
                "parentUUID": "e47509e0-e930-4fe1-b8db-2e9af5d00163",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getDomain.js",
            "uuid": "e47509e0-e930-4fe1-b8db-2e9af5d00163",
            "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_006: Get Domain API OSS_006_11: Successfully got domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "df421764-4048-41d8-ab78-b1009e72d896",
                "parentUUID": "e47509e0-e930-4fe1-b8db-2e9af5d00163",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1147
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/getDomain.js",
        "uuid": "829d316f-9d79-4075-9586-d495777a3a42",
        "fullFile": "/vagrant/object-storage-service/test/getDomain.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_008: List Domains API",
        "suites": [
          {
            "title": "OSS_008_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2584bcc6-d81f-4892-8998-16e3df181121",
                "parentUUID": "6a3b2b74-61d4-455f-b67f-a3f33d204ade",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "6a3b2b74-61d4-455f-b67f-a3f33d204ade",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2584bcc6-d81f-4892-8998-16e3df181121",
                "parentUUID": "6a3b2b74-61d4-455f-b67f-a3f33d204ade",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 361
          },
          {
            "title": "OSS_008_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 819,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "05b43260-8711-4d16-9fee-2bdf34fa17bb",
                "parentUUID": "20fa95e6-40e4-43ea-9777-7fe331bbf150",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "20fa95e6-40e4-43ea-9777-7fe331bbf150",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 819,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "05b43260-8711-4d16-9fee-2bdf34fa17bb",
                "parentUUID": "20fa95e6-40e4-43ea-9777-7fe331bbf150",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 819
          },
          {
            "title": "OSS_008_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "c22c0b08-277e-47a8-881a-52809e58c9ab",
                "parentUUID": "0daab94d-ae93-46c1-80ef-8d4b2d15b723",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "0daab94d-ae93-46c1-80ef-8d4b2d15b723",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "c22c0b08-277e-47a8-881a-52809e58c9ab",
                "parentUUID": "0daab94d-ae93-46c1-80ef-8d4b2d15b723",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1759
          },
          {
            "title": "OSS_008_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Should return 'Missing Required Header: X-Signature'",
                "fullTitle": "OSS_008: List Domains API OSS_008_04: If the X-Signature Header in request is missing. Should return 'Missing Required Header: X-Signature'",
                "timedOut": false,
                "duration": 1339,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "060d0fb7-d355-4eca-a38a-c0d476be7034",
                "parentUUID": "9d6bb93b-72ee-4067-a176-f442c9996c00",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "9d6bb93b-72ee-4067-a176-f442c9996c00",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Should return 'Missing Required Header: X-Signature'",
                "fullTitle": "OSS_008: List Domains API OSS_008_04: If the X-Signature Header in request is missing. Should return 'Missing Required Header: X-Signature'",
                "timedOut": false,
                "duration": 1339,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "060d0fb7-d355-4eca-a38a-c0d476be7034",
                "parentUUID": "9d6bb93b-72ee-4067-a176-f442c9996c00",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1339
          },
          {
            "title": "OSS_008_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1e43688a-4da0-4fce-8324-9d7639c722b8",
                "parentUUID": "491f14af-7bef-4256-8f3f-d55e530df810",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "491f14af-7bef-4256-8f3f-d55e530df810",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1e43688a-4da0-4fce-8324-9d7639c722b8",
                "parentUUID": "491f14af-7bef-4256-8f3f-d55e530df810",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 312
          },
          {
            "title": "OSS_008_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f25f880f-a581-4a43-8569-3eb663ca692b",
                "parentUUID": "c7fbc191-c291-411a-b65f-54e95368a478",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "c7fbc191-c291-411a-b65f-54e95368a478",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 412,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f25f880f-a581-4a43-8569-3eb663ca692b",
                "parentUUID": "c7fbc191-c291-411a-b65f-54e95368a478",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 412
          },
          {
            "title": "OSS_008_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 898,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ac747065-668c-4fa8-a685-b0535ded218c",
                "parentUUID": "d31cf60b-2b0b-42c0-a212-51b055fc1fdd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "d31cf60b-2b0b-42c0-a212-51b055fc1fdd",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 898,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ac747065-668c-4fa8-a685-b0535ded218c",
                "parentUUID": "d31cf60b-2b0b-42c0-a212-51b055fc1fdd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 898
          },
          {
            "title": "OSS_008_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1700,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3338897e-ef0f-40ca-8356-d3bfc8050ffb",
                "parentUUID": "2f6d9688-8288-4c49-868b-b336f5298db8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "2f6d9688-8288-4c49-868b-b336f5298db8",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_008: List Domains API OSS_008_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 1700,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3338897e-ef0f-40ca-8356-d3bfc8050ffb",
                "parentUUID": "2f6d9688-8288-4c49-868b-b336f5298db8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1700
          },
          {
            "title": "OSS_008_09: Successfully list empty domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
                "fullTitle": "OSS_008: List Domains API OSS_008_09: Successfully list empty domain item. Server should return {\"httpStatus\":200,\"data\":[]}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 404 to equal 200",
                  "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listDomains.js:380:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "85da1c0f-5e6d-4c5f-9d21-9d136906d7a2",
                "parentUUID": "2d87a24c-d21b-4236-95a0-b161f3d9ceeb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "2d87a24c-d21b-4236-95a0-b161f3d9ceeb",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [],
            "failures": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
                "fullTitle": "OSS_008: List Domains API OSS_008_09: Successfully list empty domain item. Server should return {\"httpStatus\":200,\"data\":[]}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 404 to equal 200",
                  "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listDomains.js:380:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "85da1c0f-5e6d-4c5f-9d21-9d136906d7a2",
                "parentUUID": "2d87a24c-d21b-4236-95a0-b161f3d9ceeb",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_008_10: Successfully list domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_008: List Domains API OSS_008_10: Successfully list domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 722,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "35c20cc0-fd8f-409f-af67-ba48013c8799",
                "parentUUID": "3e7913dd-09bc-4b08-8793-b8be2e7f99b1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listDomains.js",
            "uuid": "3e7913dd-09bc-4b08-8793-b8be2e7f99b1",
            "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_008: List Domains API OSS_008_10: Successfully list domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 722,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "35c20cc0-fd8f-409f-af67-ba48013c8799",
                "parentUUID": "3e7913dd-09bc-4b08-8793-b8be2e7f99b1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 722
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/listDomains.js",
        "uuid": "5c79abe6-2696-4454-bc80-1ff10aef879e",
        "fullFile": "/vagrant/object-storage-service/test/listDomains.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_012: Delete Domain API",
        "suites": [
          {
            "title": "OSS_012_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 290,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "518ca17b-95a3-4aa0-b520-551f0d5a52d2",
                "parentUUID": "bc0a7a60-1d0f-44e6-bd7a-be88bb03e14e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "bc0a7a60-1d0f-44e6-bd7a-be88bb03e14e",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 290,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "518ca17b-95a3-4aa0-b520-551f0d5a52d2",
                "parentUUID": "bc0a7a60-1d0f-44e6-bd7a-be88bb03e14e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 290
          },
          {
            "title": "OSS_012_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2fd60126-2fa2-42ca-b50e-c7cac0cf5045",
                "parentUUID": "9f7f2ab1-0f0c-4795-93b8-353c5c0abc25",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "9f7f2ab1-0f0c-4795-93b8-353c5c0abc25",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2fd60126-2fa2-42ca-b50e-c7cac0cf5045",
                "parentUUID": "9f7f2ab1-0f0c-4795-93b8-353c5c0abc25",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 479
          },
          {
            "title": "OSS_012_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1469,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d704a320-1bf0-4088-ac8b-583a3d2c1d9e",
                "parentUUID": "5fd92072-0d2e-425d-a8eb-4a2aa972cfc7",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "5fd92072-0d2e-425d-a8eb-4a2aa972cfc7",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1469,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d704a320-1bf0-4088-ac8b-583a3d2c1d9e",
                "parentUUID": "5fd92072-0d2e-425d-a8eb-4a2aa972cfc7",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1469
          },
          {
            "title": "OSS_012_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b9d83c77-60e5-411f-9d11-bbe75e85e845",
                "parentUUID": "e533fd75-170e-4507-b594-a00572bdf536",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "e533fd75-170e-4507-b594-a00572bdf536",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 615,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b9d83c77-60e5-411f-9d11-bbe75e85e845",
                "parentUUID": "e533fd75-170e-4507-b594-a00572bdf536",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 615
          },
          {
            "title": "OSS_012_05: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_05: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 2477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "20d6af95-22a9-4261-b525-09eb0a0e3a62",
                "parentUUID": "d87a2a64-0943-432f-82de-c48e79d94426",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "d87a2a64-0943-432f-82de-c48e79d94426",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_05: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 2477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "20d6af95-22a9-4261-b525-09eb0a0e3a62",
                "parentUUID": "d87a2a64-0943-432f-82de-c48e79d94426",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2477
          },
          {
            "title": "OSS_012_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1076,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2a489124-7fac-4643-88c8-05cb23fc7700",
                "parentUUID": "77e5da18-9732-4953-9667-d9b63ceb1298",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "77e5da18-9732-4953-9667-d9b63ceb1298",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1076,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2a489124-7fac-4643-88c8-05cb23fc7700",
                "parentUUID": "77e5da18-9732-4953-9667-d9b63ceb1298",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1076
          },
          {
            "title": "OSS_012_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1022,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "72d32a6d-976c-4198-a6e0-5a268e6836d7",
                "parentUUID": "7e007d96-3f52-4401-872c-537ef80f5ffb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "7e007d96-3f52-4401-872c-537ef80f5ffb",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1022,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "72d32a6d-976c-4198-a6e0-5a268e6836d7",
                "parentUUID": "7e007d96-3f52-4401-872c-537ef80f5ffb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1022
          },
          {
            "title": "OSS_012_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 443,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b9788ed0-ca70-46cc-8eea-70cda00b877c",
                "parentUUID": "51735b25-6d71-4b99-a446-4ff1be8b63ac",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "51735b25-6d71-4b99-a446-4ff1be8b63ac",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 443,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b9788ed0-ca70-46cc-8eea-70cda00b877c",
                "parentUUID": "51735b25-6d71-4b99-a446-4ff1be8b63ac",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 443
          },
          {
            "title": "OSS_012_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 310,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "ca18b73c-3890-4876-b4e1-cbef50863493",
                    "parentUUID": "1ee1cca4-ce42-40d2-ac88-068920fbbd2c",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteDomain.js",
                "uuid": "1ee1cca4-ce42-40d2-ac88-068920fbbd2c",
                "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 310,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "ca18b73c-3890-4876-b4e1-cbef50863493",
                    "parentUUID": "1ee1cca4-ce42-40d2-ac88-068920fbbd2c",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 310
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1083,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "1a0f977f-2f3c-4375-b807-a22b68b5863a",
                    "parentUUID": "e6f3035b-20c6-49d5-8ce5-a83faac88a67",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteDomain.js",
                "uuid": "e6f3035b-20c6-49d5-8ce5-a83faac88a67",
                "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1083,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "1a0f977f-2f3c-4375-b807-a22b68b5863a",
                    "parentUUID": "e6f3035b-20c6-49d5-8ce5-a83faac88a67",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1083
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1353,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "dae00785-922a-4063-8f58-35a2075a83b8",
                    "parentUUID": "f9846923-4d4c-46f1-91c6-30615c9b2eb9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteDomain.js",
                "uuid": "f9846923-4d4c-46f1-91c6-30615c9b2eb9",
                "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_012_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1353,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "dae00785-922a-4063-8f58-35a2075a83b8",
                    "parentUUID": "f9846923-4d4c-46f1-91c6-30615c9b2eb9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1353
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "b13c6567-da50-4514-ace3-3119f246cfb5",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_012_10: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1995,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e74ab578-428c-4836-82bd-62e43a9c8edb",
                "parentUUID": "d48ce91c-ac36-4d5f-a9eb-b6d2ffc7aa37",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "d48ce91c-ac36-4d5f-a9eb-b6d2ffc7aa37",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1995,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "e74ab578-428c-4836-82bd-62e43a9c8edb",
                "parentUUID": "d48ce91c-ac36-4d5f-a9eb-b6d2ffc7aa37",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1995
          },
          {
            "title": "OSS_012_11: Successfully deleted domain item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_11: Successfully deleted domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 4165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          <span class=\"hljs-comment\">// console.log(err.name)</span><br>          <span class=\"hljs-comment\">// console.log(err.message)</span><br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          <span class=\"hljs-comment\">// expect(data.id).to.equal(domain_id);</span><br>          <span class=\"hljs-comment\">// expect(data.name).to.equal(new_domain_name);</span><br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "6016a705-140a-453d-91fb-332692ae2211",
                "parentUUID": "b672b931-76a8-4b1e-bfda-bad5b983f55e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteDomain.js",
            "uuid": "b672b931-76a8-4b1e-bfda-bad5b983f55e",
            "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_012: Delete Domain API OSS_012_11: Successfully deleted domain item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 4165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          <span class=\"hljs-comment\">// console.log(err.name)</span><br>          <span class=\"hljs-comment\">// console.log(err.message)</span><br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          <span class=\"hljs-comment\">// expect(data.id).to.equal(domain_id);</span><br>          <span class=\"hljs-comment\">// expect(data.name).to.equal(new_domain_name);</span><br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "6016a705-140a-453d-91fb-332692ae2211",
                "parentUUID": "b672b931-76a8-4b1e-bfda-bad5b983f55e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4165
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/deleteDomain.js",
        "uuid": "675c90b3-db03-463c-9d8d-6ce7a1c02d49",
        "fullFile": "/vagrant/object-storage-service/test/deleteDomain.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_004: Create Object API",
        "suites": [
          {
            "title": "OSS_004_01: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2c248ca0-3bf3-446b-9bd1-9e787fef43ca",
                "parentUUID": "e72b71b2-eab0-485c-ba5f-8928cace9ff3",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "e72b71b2-eab0-485c-ba5f-8928cace9ff3",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2c248ca0-3bf3-446b-9bd1-9e787fef43ca",
                "parentUUID": "e72b71b2-eab0-485c-ba5f-8928cace9ff3",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1197
          },
          {
            "title": "OSS_004_02: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 844,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7c6a14dd-f419-4d94-8e7b-ea897fa5f05d",
                "parentUUID": "b5256359-88db-4115-b185-8d6adea2ac61",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "b5256359-88db-4115-b185-8d6adea2ac61",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 844,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "7c6a14dd-f419-4d94-8e7b-ea897fa5f05d",
                "parentUUID": "b5256359-88db-4115-b185-8d6adea2ac61",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 844
          },
          {
            "title": "OSS_004_03: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "23ea577f-f4c7-4e5e-b26d-62fb09d62467",
                "parentUUID": "d9488345-5e32-4455-a252-da37acc83670",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "d9488345-5e32-4455-a252-da37acc83670",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 266,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "23ea577f-f4c7-4e5e-b26d-62fb09d62467",
                "parentUUID": "d9488345-5e32-4455-a252-da37acc83670",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 266
          },
          {
            "title": "OSS_004_04: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "100fd6d8-671e-419d-aff9-31bf85f6091a",
                "parentUUID": "de4bc6c4-8443-498a-ae4c-158bc9e345c4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "de4bc6c4-8443-498a-ae4c-158bc9e345c4",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "100fd6d8-671e-419d-aff9-31bf85f6091a",
                "parentUUID": "de4bc6c4-8443-498a-ae4c-158bc9e345c4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1150
          },
          {
            "title": "OSS_004_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "daf9f7e0-603d-4745-b0a8-4086bb858e6e",
                "parentUUID": "6afcc243-89f5-4399-bb47-85640a7baacf",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "6afcc243-89f5-4399-bb47-85640a7baacf",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 361,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "daf9f7e0-603d-4745-b0a8-4086bb858e6e",
                "parentUUID": "6afcc243-89f5-4399-bb47-85640a7baacf",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 361
          },
          {
            "title": "OSS_004_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 366,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "63de1dfb-f31a-47f8-877f-fc6e9208dca6",
                "parentUUID": "5783b571-9e45-4db8-8f6c-c935ec9145c1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "5783b571-9e45-4db8-8f6c-c935ec9145c1",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 366,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "63de1dfb-f31a-47f8-877f-fc6e9208dca6",
                "parentUUID": "5783b571-9e45-4db8-8f6c-c935ec9145c1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 366
          },
          {
            "title": "OSS_004_07: If the key param is invalid.",
            "suites": [
              {
                "title": "Invalid object name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 305,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "55222c6c-9ab9-474d-ad12-4a2ff4dd299d",
                    "parentUUID": "d23805fb-2bca-43b2-b072-14ef7a1cebf5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createObject.js",
                "uuid": "d23805fb-2bca-43b2-b072-14ef7a1cebf5",
                "fullFile": "/vagrant/object-storage-service/test/createObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 305,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "55222c6c-9ab9-474d-ad12-4a2ff4dd299d",
                    "parentUUID": "d23805fb-2bca-43b2-b072-14ef7a1cebf5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 305
              },
              {
                "title": "Invalid object name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 907,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "6c2c152a-b9aa-45af-84ac-40d98fd1d669",
                    "parentUUID": "c4b5d2bf-afeb-4942-900f-e4c297084704",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createObject.js",
                "uuid": "c4b5d2bf-afeb-4942-900f-e4c297084704",
                "fullFile": "/vagrant/object-storage-service/test/createObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 907,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "6c2c152a-b9aa-45af-84ac-40d98fd1d669",
                    "parentUUID": "c4b5d2bf-afeb-4942-900f-e4c297084704",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 907
              },
              {
                "title": "Invalid object name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 287,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form[<span class=\"hljs-string\">'key'</span>] = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5434a034-1c7c-4d01-9fef-f69fd92b79e1",
                    "parentUUID": "315bf232-fb01-4a02-8f5a-3a163941819b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/createObject.js",
                "uuid": "315bf232-fb01-4a02-8f5a-3a163941819b",
                "fullFile": "/vagrant/object-storage-service/test/createObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_004_07: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 287,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form[<span class=\"hljs-string\">'key'</span>] = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5434a034-1c7c-4d01-9fef-f69fd92b79e1",
                    "parentUUID": "315bf232-fb01-4a02-8f5a-3a163941819b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 287
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "bcd96a16-3cce-4910-8740-7275bb51e1e1",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_004_08: If the content_type param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_08: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "timedOut": false,
                "duration": 477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1b10ec06-9c2d-4824-a14f-d7f2c08ae8b9",
                "parentUUID": "20572f58-74d1-42b9-9693-725cca6f161d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "20572f58-74d1-42b9-9693-725cca6f161d",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_08: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "timedOut": false,
                "duration": 477,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1b10ec06-9c2d-4824-a14f-d7f2c08ae8b9",
                "parentUUID": "20572f58-74d1-42b9-9693-725cca6f161d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 477
          },
          {
            "title": "OSS_004_09: If the content_type param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_09: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "timedOut": false,
                "duration": 342,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "540db9ec-af83-438e-a21c-4713b34b9996",
                "parentUUID": "eb53ba9e-5961-426d-9cea-0eb560f77a83",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "eb53ba9e-5961-426d-9cea-0eb560f77a83",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_09: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "timedOut": false,
                "duration": 342,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "540db9ec-af83-438e-a21c-4713b34b9996",
                "parentUUID": "eb53ba9e-5961-426d-9cea-0eb560f77a83",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 342
          },
          {
            "title": "OSS_004_10: If the content param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_10: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "timedOut": false,
                "duration": 478,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f5a2b70b-3609-45e7-ba79-c44eef9c3af0",
                "parentUUID": "26bfe323-aa74-492f-88a9-90b6f3bcd485",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "26bfe323-aa74-492f-88a9-90b6f3bcd485",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_10: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "timedOut": false,
                "duration": 478,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f5a2b70b-3609-45e7-ba79-c44eef9c3af0",
                "parentUUID": "26bfe323-aa74-492f-88a9-90b6f3bcd485",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 478
          },
          {
            "title": "OSS_004_11: If the content param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_11: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "timedOut": false,
                "duration": 565,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6ff45335-a221-4805-9ef0-e0dc784b86ec",
                "parentUUID": "6df0f4c9-3d50-4525-990d-73d3d56cfd50",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "6df0f4c9-3d50-4525-990d-73d3d56cfd50",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_11: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "timedOut": false,
                "duration": 565,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6ff45335-a221-4805-9ef0-e0dc784b86ec",
                "parentUUID": "6df0f4c9-3d50-4525-990d-73d3d56cfd50",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 565
          },
          {
            "title": "OSS_004_12: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_12: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 372,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "316e3ac7-2104-4dd8-9c28-fb02139c4fd0",
                "parentUUID": "30a7e485-314d-42c9-9c1a-7e0bf637a31e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "30a7e485-314d-42c9-9c1a-7e0bf637a31e",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_12: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 372,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "316e3ac7-2104-4dd8-9c28-fb02139c4fd0",
                "parentUUID": "30a7e485-314d-42c9-9c1a-7e0bf637a31e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 372
          },
          {
            "title": "OSS_004_13: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_13: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 775,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "06ec9702-0d87-4c97-a27b-f497c3015f78",
                "parentUUID": "c2b843b6-14e2-4491-8f6e-f8a4a9ec2a86",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "c2b843b6-14e2-4491-8f6e-f8a4a9ec2a86",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_13: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 775,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "06ec9702-0d87-4c97-a27b-f497c3015f78",
                "parentUUID": "c2b843b6-14e2-4491-8f6e-f8a4a9ec2a86",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 775
          },
          {
            "title": "OSS_004_14: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 870,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'domain'</span>] = <span class=\"hljs-string\">'unavailable_domain'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "cced4990-1dfb-4801-a636-8e9f3570b879",
                "parentUUID": "3bb8d804-2417-4ec7-a202-ef9b1120a404",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "3bb8d804-2417-4ec7-a202-ef9b1120a404",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 870,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'domain'</span>] = <span class=\"hljs-string\">'unavailable_domain'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "cced4990-1dfb-4801-a636-8e9f3570b879",
                "parentUUID": "3bb8d804-2417-4ec7-a202-ef9b1120a404",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 870
          },
          {
            "title": "OSS_004_15: If the key already exists.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_15: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "timedOut": false,
                "duration": 540,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "de0832bb-3906-44fa-afb6-2ded6c2c5eb6",
                "parentUUID": "f31ad34c-f7d6-4eaf-a6bd-ed3c589a9ae5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "f31ad34c-f7d6-4eaf-a6bd-ed3c589a9ae5",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "fullTitle": "OSS_004: Create Object API OSS_004_15: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "timedOut": false,
                "duration": 540,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "de0832bb-3906-44fa-afb6-2ded6c2c5eb6",
                "parentUUID": "f31ad34c-f7d6-4eaf-a6bd-ed3c589a9ae5",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 540
          },
          {
            "title": "OSS_004_16: Successfully created json object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_004: Create Object API OSS_004_16: Successfully created json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1919,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "188bddf7-21b7-4de3-81a7-e6f1c11d5271",
                "parentUUID": "26eb36b0-c564-449b-9399-01cef3390020",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "26eb36b0-c564-449b-9399-01cef3390020",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_004: Create Object API OSS_004_16: Successfully created json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1919,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "188bddf7-21b7-4de3-81a7-e6f1c11d5271",
                "parentUUID": "26eb36b0-c564-449b-9399-01cef3390020",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1919
          },
          {
            "title": "OSS_004_17: Successfully created file object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_004: Create Object API OSS_004_17: Successfully created file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 2442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`body: <span class=\"hljs-subst\">${body}</span>`</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`typeof data: <span class=\"hljs-subst\">${typeof body}</span>`</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8667bdf5-3270-49b8-b4dd-2f28c4b6d55d",
                "parentUUID": "716ea079-92e3-497a-adca-24affa0ee4f8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "716ea079-92e3-497a-adca-24affa0ee4f8",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_004: Create Object API OSS_004_17: Successfully created file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 2442,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`body: <span class=\"hljs-subst\">${body}</span>`</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`typeof data: <span class=\"hljs-subst\">${typeof body}</span>`</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8667bdf5-3270-49b8-b4dd-2f28c4b6d55d",
                "parentUUID": "716ea079-92e3-497a-adca-24affa0ee4f8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2442
          },
          {
            "title": "OSS_004_18: Successfully created json object item with content contains chinese words.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_004: Create Object API OSS_004_18: Successfully created json object item with content contains chinese words. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\"key\":\"一二三\"}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 200",
                  "stack": "AssertionError: expected 400 to equal 200<br>    at Request._callback (test/createObject.js:763:44)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "d8d3ce42-fe9d-44e3-bd1a-f437c7d3f17b",
                "parentUUID": "1e14d21c-e594-43fb-b8fc-23a008e79ba6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/createObject.js",
            "uuid": "1e14d21c-e594-43fb-b8fc-23a008e79ba6",
            "fullFile": "/vagrant/object-storage-service/test/createObject.js",
            "passes": [],
            "failures": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_004: Create Object API OSS_004_18: Successfully created json object item with content contains chinese words. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\"key\":\"一二三\"}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 400 to equal 200",
                  "stack": "AssertionError: expected 400 to equal 200<br>    at Request._callback (test/createObject.js:763:44)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "d8d3ce42-fe9d-44e3-bd1a-f437c7d3f17b",
                "parentUUID": "1e14d21c-e594-43fb-b8fc-23a008e79ba6",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/createObject.js",
        "uuid": "4db7b7e3-8e32-4599-9929-f90b052f3c89",
        "fullFile": "/vagrant/object-storage-service/test/createObject.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_011: Update Object API",
        "suites": [
          {
            "title": "OSS_011_01: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2331a879-666b-4871-aeee-c6a007760ff8",
                "parentUUID": "21757952-87c0-439a-bd63-498ef9453f03",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "21757952-87c0-439a-bd63-498ef9453f03",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 255,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2331a879-666b-4871-aeee-c6a007760ff8",
                "parentUUID": "21757952-87c0-439a-bd63-498ef9453f03",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 255
          },
          {
            "title": "OSS_011_02: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1747,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ba730c81-6fa1-42b9-b53f-19c60891e0d8",
                "parentUUID": "f3e21e63-b636-4631-9e8c-3142efee8004",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "f3e21e63-b636-4631-9e8c-3142efee8004",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1747,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ba730c81-6fa1-42b9-b53f-19c60891e0d8",
                "parentUUID": "f3e21e63-b636-4631-9e8c-3142efee8004",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1747
          },
          {
            "title": "OSS_011_03: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 384,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "af99439a-a4f6-42c7-a2fb-33dae2cf337d",
                "parentUUID": "c6daa9b6-f2d0-43d2-a111-c7b6758280fc",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "c6daa9b6-f2d0-43d2-a111-c7b6758280fc",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 384,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "af99439a-a4f6-42c7-a2fb-33dae2cf337d",
                "parentUUID": "c6daa9b6-f2d0-43d2-a111-c7b6758280fc",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 384
          },
          {
            "title": "OSS_011_04: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1303,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3a1742f3-cc9a-49b7-b002-fc990d080cd2",
                "parentUUID": "95b98e46-5525-4e69-8271-c146c13e6c29",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "95b98e46-5525-4e69-8271-c146c13e6c29",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 1303,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3a1742f3-cc9a-49b7-b002-fc990d080cd2",
                "parentUUID": "95b98e46-5525-4e69-8271-c146c13e6c29",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1303
          },
          {
            "title": "OSS_011_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 528,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "44e921cf-7669-48bb-9883-7eb5f713c9a3",
                "parentUUID": "61b4c9fa-4bb8-4ba7-aa6e-6426d38cb746",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "61b4c9fa-4bb8-4ba7-aa6e-6426d38cb746",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 528,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "44e921cf-7669-48bb-9883-7eb5f713c9a3",
                "parentUUID": "61b4c9fa-4bb8-4ba7-aa6e-6426d38cb746",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 528
          },
          {
            "title": "OSS_011_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9a5c47db-9df8-4736-97a3-cb44adf1447e",
                "parentUUID": "e6e67ba9-cac3-46d0-965d-f8d21c38430a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "e6e67ba9-cac3-46d0-965d-f8d21c38430a",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "9a5c47db-9df8-4736-97a3-cb44adf1447e",
                "parentUUID": "e6e67ba9-cac3-46d0-965d-f8d21c38430a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 302
          },
          {
            "title": "OSS_011_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1063,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "cb0a5271-0411-4fbd-aba7-248d165798a5",
                "parentUUID": "4a709326-5bd3-466c-88c9-1512003849e1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "4a709326-5bd3-466c-88c9-1512003849e1",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 1063,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "cb0a5271-0411-4fbd-aba7-248d165798a5",
                "parentUUID": "4a709326-5bd3-466c-88c9-1512003849e1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1063
          },
          {
            "title": "OSS_011_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 967,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6544c220-bf74-4a43-b661-5f23fa767cac",
                "parentUUID": "55b1b461-40dd-4e59-8fbe-c15131a84490",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "55b1b461-40dd-4e59-8fbe-c15131a84490",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 967,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6544c220-bf74-4a43-b661-5f23fa767cac",
                "parentUUID": "55b1b461-40dd-4e59-8fbe-c15131a84490",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 967
          },
          {
            "title": "OSS_011_09: If the new key in param is invalid.",
            "suites": [
              {
                "title": "Invalid object name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1475,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_key = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "ba1fe53e-4ed3-4aed-ab9c-4960560d62e5",
                    "parentUUID": "66da235b-755d-4aaf-9838-4dd71b37c166",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateObject.js",
                "uuid": "66da235b-755d-4aaf-9838-4dd71b37c166",
                "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1475,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_key = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "ba1fe53e-4ed3-4aed-ab9c-4960560d62e5",
                    "parentUUID": "66da235b-755d-4aaf-9838-4dd71b37c166",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1475
              },
              {
                "title": "Invalid object name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1447,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_key = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "fd397661-328d-4d8d-a64d-4df49c9c9063",
                    "parentUUID": "ef8a4713-8290-4e6a-b9f8-9cb3c248e2a5",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateObject.js",
                "uuid": "ef8a4713-8290-4e6a-b9f8-9cb3c248e2a5",
                "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1447,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "options.form.new_key = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "fd397661-328d-4d8d-a64d-4df49c9c9063",
                    "parentUUID": "ef8a4713-8290-4e6a-b9f8-9cb3c248e2a5",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1447
              },
              {
                "title": "Invalid object name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1003,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form.new_key = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "330395a5-dfb1-4ec0-9f1f-a58586322edc",
                    "parentUUID": "caefa5d4-a63d-4662-b360-3122d35bd827",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/updateObject.js",
                "uuid": "caefa5d4-a63d-4662-b360-3122d35bd827",
                "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "fullTitle": "OSS_011_09: If the new key in param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
                    "timedOut": false,
                    "duration": 1003,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form.new_key = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "330395a5-dfb1-4ec0-9f1f-a58586322edc",
                    "parentUUID": "caefa5d4-a63d-4662-b360-3122d35bd827",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1003
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "dd870464-aefd-4113-a473-e93e025026e5",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_011_10: If the content_type param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_10: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "timedOut": false,
                "duration": 920,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bf80e046-10c6-47fc-acaa-2cc6a0dd1d7b",
                "parentUUID": "791cfac2-79da-4b97-997c-a10f4782545c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "791cfac2-79da-4b97-997c-a10f4782545c",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_10: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
                "timedOut": false,
                "duration": 920,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bf80e046-10c6-47fc-acaa-2cc6a0dd1d7b",
                "parentUUID": "791cfac2-79da-4b97-997c-a10f4782545c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 920
          },
          {
            "title": "OSS_011_11: If the content_type param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_11: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "timedOut": false,
                "duration": 806,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8f17c258-94ad-44be-aafb-c21d5426db0e",
                "parentUUID": "52816e94-f4b3-430f-adb3-ebaa79cf14f1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "52816e94-f4b3-430f-adb3-ebaa79cf14f1",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_11: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
                "timedOut": false,
                "duration": 806,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8f17c258-94ad-44be-aafb-c21d5426db0e",
                "parentUUID": "52816e94-f4b3-430f-adb3-ebaa79cf14f1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 806
          },
          {
            "title": "OSS_011_12: If the content param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_12: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "timedOut": false,
                "duration": 316,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d311a35a-96b9-4f1e-8518-b122a3a6211e",
                "parentUUID": "4fbe726e-ca53-4ef2-97a9-27929151594e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "4fbe726e-ca53-4ef2-97a9-27929151594e",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_12: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
                "timedOut": false,
                "duration": 316,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d311a35a-96b9-4f1e-8518-b122a3a6211e",
                "parentUUID": "4fbe726e-ca53-4ef2-97a9-27929151594e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 316
          },
          {
            "title": "OSS_011_13: If the content param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_13: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "timedOut": false,
                "duration": 1532,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6a3bc1ac-d6ac-473c-845d-f95fd5842610",
                "parentUUID": "505135f6-e8e7-4a73-b945-53ede2a9c342",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "505135f6-e8e7-4a73-b945-53ede2a9c342",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_13: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
                "timedOut": false,
                "duration": 1532,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "6a3bc1ac-d6ac-473c-845d-f95fd5842610",
                "parentUUID": "505135f6-e8e7-4a73-b945-53ede2a9c342",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1532
          },
          {
            "title": "OSS_011_14: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 2006,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.setFormAndPath({ domain: <span class=\"hljs-string\">'unavailable_domain'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "368c8a51-b1d8-4d66-b23e-f4acbddcaf8e",
                "parentUUID": "05e6be11-d44e-4843-95f6-22da851e1ebb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "05e6be11-d44e-4843-95f6-22da851e1ebb",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 2006,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.setFormAndPath({ domain: <span class=\"hljs-string\">'unavailable_domain'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "368c8a51-b1d8-4d66-b23e-f4acbddcaf8e",
                "parentUUID": "05e6be11-d44e-4843-95f6-22da851e1ebb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2006
          },
          {
            "title": "OSS_011_15: Cannot find object.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_15: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 580,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.setFormAndPath({ key: <span class=\"hljs-string\">'unavailable_object'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.object.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1a97e3cc-6a19-4e19-8f24-86abd695d248",
                "parentUUID": "ae6cea8f-bc46-47f1-984f-ccb27db17261",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "ae6cea8f-bc46-47f1-984f-ccb27db17261",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_15: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 580,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.setFormAndPath({ key: <span class=\"hljs-string\">'unavailable_object'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.object.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "1a97e3cc-6a19-4e19-8f24-86abd695d248",
                "parentUUID": "ae6cea8f-bc46-47f1-984f-ccb27db17261",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 580
          },
          {
            "title": "OSS_011_16: If the key already exists.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_16: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "timedOut": false,
                "duration": 1911,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.new_key = customs.new_key;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "23e3827b-dc8a-456e-b153-f497244ae90e",
                "parentUUID": "d0b41345-aca2-483a-b417-573017690d52",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "d0b41345-aca2-483a-b417-573017690d52",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "fullTitle": "OSS_011: Update Object API OSS_011_16: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
                "timedOut": false,
                "duration": 1911,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form.new_key = customs.new_key;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "23e3827b-dc8a-456e-b153-f497244ae90e",
                "parentUUID": "d0b41345-aca2-483a-b417-573017690d52",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1911
          },
          {
            "title": "OSS_011_17: Successfully updated json object item to json object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2618,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2781679c-4ecd-4108-80b5-7b4b3060efcd",
                "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
                "skipped": false
              },
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2692,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_key_2'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ddbd9992-3d0c-4f57-9c64-a0df29449116",
                "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "61ccd2ba-32dd-4e83-93e1-733467158130",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2618,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "2781679c-4ecd-4108-80b5-7b4b3060efcd",
                "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
                "skipped": false
              },
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2692,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_key_2'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ddbd9992-3d0c-4f57-9c64-a0df29449116",
                "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 5310
          },
          {
            "title": "OSS_011_18: Successfully updated json object item to file object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_011: Update Object API OSS_011_18: Successfully updated json object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 2717,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(<span class=\"hljs-number\">0</span>);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage - customs.old_item_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "4c321265-83e9-48c5-b8f0-294a8c692eca",
                "parentUUID": "dfe9a52d-9573-434e-9e67-c17a89f6aa21",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "dfe9a52d-9573-434e-9e67-c17a89f6aa21",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_011: Update Object API OSS_011_18: Successfully updated json object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 2717,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(<span class=\"hljs-number\">0</span>);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage - customs.old_item_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "4c321265-83e9-48c5-b8f0-294a8c692eca",
                "parentUUID": "dfe9a52d-9573-434e-9e67-c17a89f6aa21",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2717
          },
          {
            "title": "OSS_011_19: Successfully updated file object item to file object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_011: Update Object API OSS_011_19: Successfully updated file object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 3313,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.setFormAndPath({ key: customs.file_key });<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form[<span class=\"hljs-string\">'new_key'</span>], (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(customs.old_item_usage);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "234499cc-f7db-4ab4-91c0-cb011b722a97",
                "parentUUID": "6eaad0b0-e567-4ff5-8258-604c3531f29f",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "6eaad0b0-e567-4ff5-8258-604c3531f29f",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "fullTitle": "OSS_011: Update Object API OSS_011_19: Successfully updated file object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
                "timedOut": false,
                "duration": 3313,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.setFormAndPath({ key: customs.file_key });<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form[<span class=\"hljs-string\">'new_key'</span>], (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(customs.old_item_usage);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "234499cc-f7db-4ab4-91c0-cb011b722a97",
                "parentUUID": "6eaad0b0-e567-4ff5-8258-604c3531f29f",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3313
          },
          {
            "title": "OSS_011_20: Successfully updated file object item to json object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_20: Successfully updated file object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": true,
                "duration": 6000,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> params = {<br>        content_type: <span class=\"hljs-string\">'application/json'</span>,<br>        content: <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span><br>      }<br>      customs.new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(params.content), <span class=\"hljs-string\">'utf8'</span>);<br>      <span class=\"hljs-keyword\">let</span> expectedCode = <span class=\"hljs-number\">200</span>;<br>      <span class=\"hljs-keyword\">let</span> expectedBody = { <span class=\"hljs-string\">\"data\"</span>: { <span class=\"hljs-string\">\"upload_url\"</span>: {} } };<br>      <span class=\"hljs-keyword\">let</span> path = { domain: customs.domain_name, key: customs.file_key };<br>      setRequest(options, params, path)<br>        .then((options) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> sendRequest(options);<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> assertResponse(data, expectedCode)<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getObjectItem(customs.cloud_id, customs.app_id, customs.domain_id, customs.file_key);<br>        })<br>        .then((objItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`objItem: <span class=\"hljs-subst\">${JSON.stringify(objItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> properties = [<span class=\"hljs-string\">'usage'</span>, <span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'content_type'</span>, <span class=\"hljs-string\">'domain_path'</span>, <span class=\"hljs-string\">'path'</span>, <span class=\"hljs-string\">'created_at'</span>, <span class=\"hljs-string\">'updated_at'</span>];<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            usage: customs.new_item_usage,<br>            content: options.form[<span class=\"hljs-string\">'content'</span>],<br>            domain_path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>,<br>            path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${customs.file_key}</span>`</span><br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(objItem, properties, expected_values);<br>        })<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getDomainItem(customs.cloud_id, customs.app_id, customs.domain_name);<br>        })<br>        .then((domainItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            file_usage: (customs.original_domain_file_usage - customs.old_item_usage),<br>            json_usage: (customs.original_domain_json_usage + customs.new_item_usage)<br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(domainItem, <span class=\"hljs-literal\">null</span>, expected_values);<br>        })<br>        .then(() =&gt; {<br>          done();<br>        })<br>        .catch((error) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`error: <span class=\"hljs-subst\">${error}</span>`</span>);<br>          done(error);<br>        })",
                "err": {
                  "name": "Error",
                  "message": "Timeout of 6000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
                  "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "1f4f4bea-ea26-4a56-b875-6c87057a7d60",
                "parentUUID": "de7b87c4-9556-4f49-ae5d-8777c91a0ca9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/updateObject.js",
            "uuid": "de7b87c4-9556-4f49-ae5d-8777c91a0ca9",
            "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
            "passes": [],
            "failures": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_011: Update Object API OSS_011_20: Successfully updated file object item to json object item. Server should return {\"httpStatus\":200}",
                "timedOut": true,
                "duration": 6000,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">let</span> params = {<br>        content_type: <span class=\"hljs-string\">'application/json'</span>,<br>        content: <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span><br>      }<br>      customs.new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(params.content), <span class=\"hljs-string\">'utf8'</span>);<br>      <span class=\"hljs-keyword\">let</span> expectedCode = <span class=\"hljs-number\">200</span>;<br>      <span class=\"hljs-keyword\">let</span> expectedBody = { <span class=\"hljs-string\">\"data\"</span>: { <span class=\"hljs-string\">\"upload_url\"</span>: {} } };<br>      <span class=\"hljs-keyword\">let</span> path = { domain: customs.domain_name, key: customs.file_key };<br>      setRequest(options, params, path)<br>        .then((options) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> sendRequest(options);<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> assertResponse(data, expectedCode)<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getObjectItem(customs.cloud_id, customs.app_id, customs.domain_id, customs.file_key);<br>        })<br>        .then((objItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`objItem: <span class=\"hljs-subst\">${JSON.stringify(objItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> properties = [<span class=\"hljs-string\">'usage'</span>, <span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'content_type'</span>, <span class=\"hljs-string\">'domain_path'</span>, <span class=\"hljs-string\">'path'</span>, <span class=\"hljs-string\">'created_at'</span>, <span class=\"hljs-string\">'updated_at'</span>];<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            usage: customs.new_item_usage,<br>            content: options.form[<span class=\"hljs-string\">'content'</span>],<br>            domain_path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>,<br>            path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${customs.file_key}</span>`</span><br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(objItem, properties, expected_values);<br>        })<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getDomainItem(customs.cloud_id, customs.app_id, customs.domain_name);<br>        })<br>        .then((domainItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            file_usage: (customs.original_domain_file_usage - customs.old_item_usage),<br>            json_usage: (customs.original_domain_json_usage + customs.new_item_usage)<br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(domainItem, <span class=\"hljs-literal\">null</span>, expected_values);<br>        })<br>        .then(() =&gt; {<br>          done();<br>        })<br>        .catch((error) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`error: <span class=\"hljs-subst\">${error}</span>`</span>);<br>          done(error);<br>        })",
                "err": {
                  "name": "Error",
                  "message": "Timeout of 6000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
                  "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves."
                },
                "isRoot": false,
                "uuid": "1f4f4bea-ea26-4a56-b875-6c87057a7d60",
                "parentUUID": "de7b87c4-9556-4f49-ae5d-8777c91a0ca9",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 6000
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/updateObject.js",
        "uuid": "c91e01a1-27fe-4a7e-acc3-e2cb0b3089fc",
        "fullFile": "/vagrant/object-storage-service/test/updateObject.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_007: Get Object API",
        "suites": [
          {
            "title": "OSS_007_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "153d2973-ecca-4248-9cdb-713a3f1766f8",
                "parentUUID": "93c599a6-5685-4434-836b-d162e5b140b6",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "93c599a6-5685-4434-836b-d162e5b140b6",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "153d2973-ecca-4248-9cdb-713a3f1766f8",
                "parentUUID": "93c599a6-5685-4434-836b-d162e5b140b6",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 479
          },
          {
            "title": "OSS_007_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 905,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0db83b21-0ed9-464a-93ef-d8de4686b7a2",
                "parentUUID": "c9e47621-c564-4841-89e1-ec14c09ce09e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "c9e47621-c564-4841-89e1-ec14c09ce09e",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 905,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0db83b21-0ed9-464a-93ef-d8de4686b7a2",
                "parentUUID": "c9e47621-c564-4841-89e1-ec14c09ce09e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 905
          },
          {
            "title": "OSS_007_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 332,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "08be968c-9501-4f4f-90ed-121a5a2d4bcd",
                "parentUUID": "bf2f72c9-0c91-4908-ba82-913f14631fe4",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "bf2f72c9-0c91-4908-ba82-913f14631fe4",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 332,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "08be968c-9501-4f4f-90ed-121a5a2d4bcd",
                "parentUUID": "bf2f72c9-0c91-4908-ba82-913f14631fe4",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 332
          },
          {
            "title": "OSS_007_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 492,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "464d7428-a62d-4368-aad0-446553d94f04",
                "parentUUID": "60c72b52-0e28-4d9c-9e68-6cc0f742bb51",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "60c72b52-0e28-4d9c-9e68-6cc0f742bb51",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 492,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "464d7428-a62d-4368-aad0-446553d94f04",
                "parentUUID": "60c72b52-0e28-4d9c-9e68-6cc0f742bb51",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 492
          },
          {
            "title": "OSS_007_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 2017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f7a2c8e4-79b8-447a-8a71-1089b749cebf",
                "parentUUID": "99d038f1-bb1f-49ab-a0eb-33f6aed68d7d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "99d038f1-bb1f-49ab-a0eb-33f6aed68d7d",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 2017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f7a2c8e4-79b8-447a-8a71-1089b749cebf",
                "parentUUID": "99d038f1-bb1f-49ab-a0eb-33f6aed68d7d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2017
          },
          {
            "title": "OSS_007_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 2048,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d1289d73-a58a-41ca-95f7-4bcb755addf0",
                "parentUUID": "eab262af-3c59-4c3e-abd3-6a6b730b97bb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "eab262af-3c59-4c3e-abd3-6a6b730b97bb",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 2048,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "d1289d73-a58a-41ca-95f7-4bcb755addf0",
                "parentUUID": "eab262af-3c59-4c3e-abd3-6a6b730b97bb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2048
          },
          {
            "title": "OSS_007_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 915,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bd9c319b-8bf9-454a-80b4-a14612e03272",
                "parentUUID": "8c9e7b65-bab5-49e3-80d8-fb49cef059bb",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "8c9e7b65-bab5-49e3-80d8-fb49cef059bb",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 915,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bd9c319b-8bf9-454a-80b4-a14612e03272",
                "parentUUID": "8c9e7b65-bab5-49e3-80d8-fb49cef059bb",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 915
          },
          {
            "title": "OSS_007_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 915,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "c0a74925-188b-4682-b4cf-fc07da14b952",
                "parentUUID": "6c46c35b-4607-45fa-a5fa-f4a23c03dd1a",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "6c46c35b-4607-45fa-a5fa-f4a23c03dd1a",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 915,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "c0a74925-188b-4682-b4cf-fc07da14b952",
                "parentUUID": "6c46c35b-4607-45fa-a5fa-f4a23c03dd1a",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 915
          },
          {
            "title": "OSS_007_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 877,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "fe9af9fc-bcfa-40c7-92a5-ea95444b125c",
                    "parentUUID": "1afdfee0-d46f-4e65-82d6-d0158423cc5f",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "1afdfee0-d46f-4e65-82d6-d0158423cc5f",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 877,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "fe9af9fc-bcfa-40c7-92a5-ea95444b125c",
                    "parentUUID": "1afdfee0-d46f-4e65-82d6-d0158423cc5f",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 877
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 760,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "67b8da18-3c2e-4c66-8311-8cc86194872a",
                    "parentUUID": "4afb61fa-b260-4323-b6da-9885402dc8ed",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "4afb61fa-b260-4323-b6da-9885402dc8ed",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 760,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "67b8da18-3c2e-4c66-8311-8cc86194872a",
                    "parentUUID": "4afb61fa-b260-4323-b6da-9885402dc8ed",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 760
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 737,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "20c7768d-d3b1-4b81-b1fb-9de71483a0a0",
                    "parentUUID": "8a83b054-5cbd-4f08-a475-0b6f02048d86",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "8a83b054-5cbd-4f08-a475-0b6f02048d86",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_007_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 737,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "20c7768d-d3b1-4b81-b1fb-9de71483a0a0",
                    "parentUUID": "8a83b054-5cbd-4f08-a475-0b6f02048d86",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 737
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "92bf4f0a-5bc4-4a2c-a1dc-78cecdc73452",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_007_10: If the key param is invalid.",
            "suites": [
              {
                "title": "Invalid object name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1293,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "bf7fc652-0c34-4cdc-81cd-9b7a41658d00",
                    "parentUUID": "136f0326-eeec-4508-ac6b-c5c8a0efd398",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "136f0326-eeec-4508-ac6b-c5c8a0efd398",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1293,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "bf7fc652-0c34-4cdc-81cd-9b7a41658d00",
                    "parentUUID": "136f0326-eeec-4508-ac6b-c5c8a0efd398",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1293
              },
              {
                "title": "Invalid object name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1597,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "d1d5c1ea-ef1c-4477-87e3-aa3a57239a03",
                    "parentUUID": "d5874a01-3196-43d6-9fe5-42550de9c499",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "d5874a01-3196-43d6-9fe5-42550de9c499",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1597,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "d1d5c1ea-ef1c-4477-87e3-aa3a57239a03",
                    "parentUUID": "d5874a01-3196-43d6-9fe5-42550de9c499",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1597
              },
              {
                "title": "Invalid object name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 505,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "c7fcd89a-c853-4fb6-925a-510272728a5f",
                    "parentUUID": "38854af9-266e-4e4f-b673-cadfee78d79a",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/getObject.js",
                "uuid": "38854af9-266e-4e4f-b673-cadfee78d79a",
                "fullFile": "/vagrant/object-storage-service/test/getObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_007_10: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 505,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "c7fcd89a-c853-4fb6-925a-510272728a5f",
                    "parentUUID": "38854af9-266e-4e4f-b673-cadfee78d79a",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 505
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "211eb69b-042f-4ab9-95f6-54a6b20bc3b3",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_007_11: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1097,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "753feebe-d9b4-41b3-b6fe-08ed9c516a0b",
                "parentUUID": "f7733929-cd3a-4ab8-9095-3dae48646a0d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "f7733929-cd3a-4ab8-9095-3dae48646a0d",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1097,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "753feebe-d9b4-41b3-b6fe-08ed9c516a0b",
                "parentUUID": "f7733929-cd3a-4ab8-9095-3dae48646a0d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1097
          },
          {
            "title": "OSS_007_12: Cannot find object.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 1099,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_object_name = <span class=\"hljs-string\">'invalid_object.jpg'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object_name}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: invalid_object_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>              <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>              expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>              expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      getDomain()<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
                "isRoot": false,
                "uuid": "29b33975-2526-4454-9d7b-1d83ad4f007c",
                "parentUUID": "d4f026b3-a1af-46a3-918c-3c2912904874",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "d4f026b3-a1af-46a3-918c-3c2912904874",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_007: Get Object API OSS_007_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 1099,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_object_name = <span class=\"hljs-string\">'invalid_object.jpg'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object_name}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: invalid_object_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>              <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>              expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>              expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      getDomain()<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
                "isRoot": false,
                "uuid": "29b33975-2526-4454-9d7b-1d83ad4f007c",
                "parentUUID": "d4f026b3-a1af-46a3-918c-3c2912904874",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1099
          },
          {
            "title": "OSS_007_13: Successfully got object file item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_007: Get Object API OSS_007_13: Successfully got object file item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2327,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"final result\"</span>);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        expect(isEmpty(body)).to.equal(<span class=\"hljs-literal\">false</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "9ba52ed5-179d-418f-b8c0-764e81961463",
                "parentUUID": "68831042-6074-46ad-814e-05e048e94065",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "68831042-6074-46ad-814e-05e048e94065",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_007: Get Object API OSS_007_13: Successfully got object file item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 2327,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"final result\"</span>);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        expect(isEmpty(body)).to.equal(<span class=\"hljs-literal\">false</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "9ba52ed5-179d-418f-b8c0-764e81961463",
                "parentUUID": "68831042-6074-46ad-814e-05e048e94065",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2327
          },
          {
            "title": "OSS_007_14: Successfully got object json item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_007: Get Object API OSS_007_14: Successfully got object json item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1496,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_json }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(body);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        <span class=\"hljs-comment\">// 因為在 testHelper.createObjectItem 內是填入 { \"message\" : \"OK\" }</span><br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.message).to.equal(<span class=\"hljs-string\">'OK'</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "67c4c8d4-91cd-4a5b-be3b-35ab279702f4",
                "parentUUID": "0ac64404-5c04-4d0d-a310-d9f2c153e45e",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/getObject.js",
            "uuid": "0ac64404-5c04-4d0d-a310-d9f2c153e45e",
            "fullFile": "/vagrant/object-storage-service/test/getObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_007: Get Object API OSS_007_14: Successfully got object json item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1496,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_json }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(body);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        <span class=\"hljs-comment\">// 因為在 testHelper.createObjectItem 內是填入 { \"message\" : \"OK\" }</span><br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.message).to.equal(<span class=\"hljs-string\">'OK'</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "67c4c8d4-91cd-4a5b-be3b-35ab279702f4",
                "parentUUID": "0ac64404-5c04-4d0d-a310-d9f2c153e45e",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1496
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/getObject.js",
        "uuid": "06ed4f47-3c35-43ad-8ec0-ff2c4ac0c14d",
        "fullFile": "/vagrant/object-storage-service/test/getObject.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_009: List Objects API",
        "suites": [
          {
            "title": "OSS_009_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1549,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b3b817b8-54d6-405a-8382-0b52d7671c5b",
                "parentUUID": "30c904e5-a9e3-4a12-93e0-61084f9a5407",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "30c904e5-a9e3-4a12-93e0-61084f9a5407",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1549,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "b3b817b8-54d6-405a-8382-0b52d7671c5b",
                "parentUUID": "30c904e5-a9e3-4a12-93e0-61084f9a5407",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1549
          },
          {
            "title": "OSS_009_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 611,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ecd9b381-7eb7-4096-a49c-3fb2661d1021",
                "parentUUID": "98c03b10-aaac-4643-bc91-feafeb176d71",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "98c03b10-aaac-4643-bc91-feafeb176d71",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 611,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "ecd9b381-7eb7-4096-a49c-3fb2661d1021",
                "parentUUID": "98c03b10-aaac-4643-bc91-feafeb176d71",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 611
          },
          {
            "title": "OSS_009_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "eff1ebd6-103b-491a-9a7a-cc3704807ed8",
                "parentUUID": "7f85e8e4-cf42-480f-ac75-3a84429d70b9",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "7f85e8e4-cf42-480f-ac75-3a84429d70b9",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 1518,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "eff1ebd6-103b-491a-9a7a-cc3704807ed8",
                "parentUUID": "7f85e8e4-cf42-480f-ac75-3a84429d70b9",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1518
          },
          {
            "title": "OSS_009_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1036,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "54a818ae-bb94-47a7-8de6-0e02d99c9f80",
                "parentUUID": "61d9b3ea-14b7-4804-9dca-e0e2c0e259ac",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "61d9b3ea-14b7-4804-9dca-e0e2c0e259ac",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 1036,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "54a818ae-bb94-47a7-8de6-0e02d99c9f80",
                "parentUUID": "61d9b3ea-14b7-4804-9dca-e0e2c0e259ac",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1036
          },
          {
            "title": "OSS_009_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1838,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aef58d4f-580c-4289-985f-72cd7590bde4",
                "parentUUID": "6bdd4ceb-5454-4163-bb68-60db2dd7204b",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "6bdd4ceb-5454-4163-bb68-60db2dd7204b",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1838,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aef58d4f-580c-4289-985f-72cd7590bde4",
                "parentUUID": "6bdd4ceb-5454-4163-bb68-60db2dd7204b",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1838
          },
          {
            "title": "OSS_009_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1593,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f8da5b70-1aba-4142-a27c-5d51b0c9e822",
                "parentUUID": "34d1be57-85b0-4741-a15b-f4b22c9ee485",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "34d1be57-85b0-4741-a15b-f4b22c9ee485",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1593,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "f8da5b70-1aba-4142-a27c-5d51b0c9e822",
                "parentUUID": "34d1be57-85b0-4741-a15b-f4b22c9ee485",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1593
          },
          {
            "title": "OSS_009_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 947,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0254e2d9-4966-4bf9-a0c9-0337de81bbef",
                "parentUUID": "58a73dc3-da96-48f2-ac2a-786ba4222ee8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "58a73dc3-da96-48f2-ac2a-786ba4222ee8",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 947,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "0254e2d9-4966-4bf9-a0c9-0337de81bbef",
                "parentUUID": "58a73dc3-da96-48f2-ac2a-786ba4222ee8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 947
          },
          {
            "title": "OSS_009_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 851,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8d5689ea-8cd6-4c6a-87b7-71a18f4c1297",
                "parentUUID": "1b135472-196c-4b74-a408-576733826183",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "1b135472-196c-4b74-a408-576733826183",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 851,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "8d5689ea-8cd6-4c6a-87b7-71a18f4c1297",
                "parentUUID": "1b135472-196c-4b74-a408-576733826183",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 851
          },
          {
            "title": "OSS_009_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 960,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "808cecb6-895c-43fd-9f1b-04688056877f",
                    "parentUUID": "81fbb4ab-0bb9-4804-a233-369f089a4df4",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/listObjects.js",
                "uuid": "81fbb4ab-0bb9-4804-a233-369f089a4df4",
                "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 960,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "808cecb6-895c-43fd-9f1b-04688056877f",
                    "parentUUID": "81fbb4ab-0bb9-4804-a233-369f089a4df4",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 960
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 2323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "2990a9b0-29ad-4d0e-872c-fdb799535b25",
                    "parentUUID": "fc9b2ecb-36fd-44b7-a025-447aee5b9132",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/listObjects.js",
                "uuid": "fc9b2ecb-36fd-44b7-a025-447aee5b9132",
                "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 2323,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "2990a9b0-29ad-4d0e-872c-fdb799535b25",
                    "parentUUID": "fc9b2ecb-36fd-44b7-a025-447aee5b9132",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 2323
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 331,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "bbe527cf-a6d3-4924-96ea-04a461b46855",
                    "parentUUID": "b3361054-30dc-450f-9d4e-5a233c257d20",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/listObjects.js",
                "uuid": "b3361054-30dc-450f-9d4e-5a233c257d20",
                "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_009_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 331,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "bbe527cf-a6d3-4924-96ea-04a461b46855",
                    "parentUUID": "b3361054-30dc-450f-9d4e-5a233c257d20",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 331
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "349da231-b1d9-476c-a4d9-d54414bc7007",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_009_10: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1713,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>        expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "121af566-3e83-4feb-b650-bba75982b594",
                "parentUUID": "85b86fc9-1988-4fbb-b203-c4b5b5478094",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "85b86fc9-1988-4fbb-b203-c4b5b5478094",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_009: List Objects API OSS_009_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 1713,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>        expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "121af566-3e83-4feb-b650-bba75982b594",
                "parentUUID": "85b86fc9-1988-4fbb-b203-c4b5b5478094",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1713
          },
          {
            "title": "OSS_009_11: Successfully list empty object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
                "fullTitle": "OSS_009: List Objects API OSS_009_11: Successfully list empty object item. Server should return {\"httpStatus\":200,\"data\":[]}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 404 to equal 200",
                  "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listObjects.js:561:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "13054156-525f-4fb3-996e-4c01e467efa9",
                "parentUUID": "233b7ec8-75f9-4324-ad74-8be8826234c5",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "233b7ec8-75f9-4324-ad74-8be8826234c5",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [],
            "failures": [
              {
                "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
                "fullTitle": "OSS_009: List Objects API OSS_009_11: Successfully list empty object item. Server should return {\"httpStatus\":200,\"data\":[]}",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "err": {
                  "name": "AssertionError",
                  "message": "expected 404 to equal 200",
                  "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listObjects.js:561:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
                },
                "isRoot": false,
                "uuid": "13054156-525f-4fb3-996e-4c01e467efa9",
                "parentUUID": "233b7ec8-75f9-4324-ad74-8be8826234c5",
                "skipped": false
              }
            ],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 0,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_009_12: Successfully list objects by all.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_12: Successfully list objects by all. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(parsedBody.data[<span class=\"hljs-number\">1</span>].key).to.equal(object2);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "09f7e2fb-35af-4695-a7e4-c5c79cc0f6a7",
                "parentUUID": "0c51d41b-4f2e-4204-84cc-2f52f53c6137",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "0c51d41b-4f2e-4204-84cc-2f52f53c6137",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_12: Successfully list objects by all. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1017,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(parsedBody.data[<span class=\"hljs-number\">1</span>].key).to.equal(object2);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "09f7e2fb-35af-4695-a7e4-c5c79cc0f6a7",
                "parentUUID": "0c51d41b-4f2e-4204-84cc-2f52f53c6137",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1017
          },
          {
            "title": "OSS_009_13: Successfully list objects by key.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_13: Successfully list objects by key. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.key = object1;<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(options);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "4077e85c-2078-4bba-9469-9185d3f515bd",
                "parentUUID": "34b9a89f-1c6d-4b27-831e-ff5dc32a99a1",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "34b9a89f-1c6d-4b27-831e-ff5dc32a99a1",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_13: Successfully list objects by key. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1681,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.key = object1;<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(options);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "4077e85c-2078-4bba-9469-9185d3f515bd",
                "parentUUID": "34b9a89f-1c6d-4b27-831e-ff5dc32a99a1",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1681
          },
          {
            "title": "OSS_009_14: Successfully list objects by begins_with.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_14: Successfully list objects by begins_with. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1869,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object2);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "06553861-8b30-4198-a039-e59a52389e69",
                "parentUUID": "7797af55-00a2-4574-bd55-6371eb5ce02d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/listObjects.js",
            "uuid": "7797af55-00a2-4574-bd55-6371eb5ce02d",
            "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_009: List Objects API OSS_009_14: Successfully list objects by begins_with. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 1869,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object2);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "06553861-8b30-4198-a039-e59a52389e69",
                "parentUUID": "7797af55-00a2-4574-bd55-6371eb5ce02d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1869
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/listObjects.js",
        "uuid": "e42bd37a-bad9-4fd3-97ef-35e150188ece",
        "fullFile": "/vagrant/object-storage-service/test/listObjects.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_013: Delete Object API",
        "suites": [
          {
            "title": "OSS_013_01: If the certificate_serial param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aac2419f-7122-42ff-915f-7fdb67dd26d9",
                "parentUUID": "9fc9d922-6c73-4d39-a932-9e1b988a6c67",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "9fc9d922-6c73-4d39-a932-9e1b988a6c67",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
                "timedOut": false,
                "duration": 1141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "aac2419f-7122-42ff-915f-7fdb67dd26d9",
                "parentUUID": "9fc9d922-6c73-4d39-a932-9e1b988a6c67",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1141
          },
          {
            "title": "OSS_013_02: If the certificate_serial param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 748,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3344fa10-33c2-414b-95c2-e69173834d4e",
                "parentUUID": "693a5595-c928-4ead-aa38-528c883ea2a2",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "693a5595-c928-4ead-aa38-528c883ea2a2",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
                "timedOut": false,
                "duration": 748,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3344fa10-33c2-414b-95c2-e69173834d4e",
                "parentUUID": "693a5595-c928-4ead-aa38-528c883ea2a2",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 748
          },
          {
            "title": "OSS_013_03: If the X-Api-Key Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "026cdec4-7c76-47d6-b6e1-fbdf7e5536a9",
                "parentUUID": "a125fb5b-d4d3-460f-b8dd-0a4475247e87",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "a125fb5b-d4d3-460f-b8dd-0a4475247e87",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "026cdec4-7c76-47d6-b6e1-fbdf7e5536a9",
                "parentUUID": "a125fb5b-d4d3-460f-b8dd-0a4475247e87",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 297
          },
          {
            "title": "OSS_013_04: If the X-Signature Header in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "4f417087-278f-4745-b311-cc9a22d01d74",
                "parentUUID": "d595ca30-c9da-4643-9c66-f3040432793d",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "d595ca30-c9da-4643-9c66-f3040432793d",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "4f417087-278f-4745-b311-cc9a22d01d74",
                "parentUUID": "d595ca30-c9da-4643-9c66-f3040432793d",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 302
          },
          {
            "title": "OSS_013_05: If the signature in request failed the verification.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1677,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "303064cc-7c85-4930-b72e-cb088ed1f303",
                "parentUUID": "2675aefa-3cc6-46b1-a42e-66ba5094e338",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "2675aefa-3cc6-46b1-a42e-66ba5094e338",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
                "timedOut": false,
                "duration": 1677,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "303064cc-7c85-4930-b72e-cb088ed1f303",
                "parentUUID": "2675aefa-3cc6-46b1-a42e-66ba5094e338",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1677
          },
          {
            "title": "OSS_013_06: If the access_token param in request is missing.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1004,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3dc43034-4dc4-4808-84c2-5a62b6b9acca",
                "parentUUID": "38ebd62c-6648-4a71-8dd5-764bb8b38e19",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "38ebd62c-6648-4a71-8dd5-764bb8b38e19",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
                "timedOut": false,
                "duration": 1004,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "3dc43034-4dc4-4808-84c2-5a62b6b9acca",
                "parentUUID": "38ebd62c-6648-4a71-8dd5-764bb8b38e19",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1004
          },
          {
            "title": "OSS_013_07: If the access_token param in request is invalid.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 793,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-comment\">// console.log(options);</span><br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "77ae7f39-ccea-4dbd-8787-b71210c2491d",
                "parentUUID": "8e0d6bd4-8375-46e3-bed5-2d5b3f22cf3c",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "8e0d6bd4-8375-46e3-bed5-2d5b3f22cf3c",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
                "timedOut": false,
                "duration": 793,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-comment\">// console.log(options);</span><br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "77ae7f39-ccea-4dbd-8787-b71210c2491d",
                "parentUUID": "8e0d6bd4-8375-46e3-bed5-2d5b3f22cf3c",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 793
          },
          {
            "title": "OSS_013_08: If the access_token param in request is expired.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 407,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "55d19d83-4980-4f98-b6c9-01f4b7885cdd",
                "parentUUID": "bc8cb8fb-c7d0-4f12-908c-ac8fdfeb8486",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "bc8cb8fb-c7d0-4f12-908c-ac8fdfeb8486",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
                "timedOut": false,
                "duration": 407,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "55d19d83-4980-4f98-b6c9-01f4b7885cdd",
                "parentUUID": "bc8cb8fb-c7d0-4f12-908c-ac8fdfeb8486",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 407
          },
          {
            "title": "OSS_013_09: If the domain in path is invalid.",
            "suites": [
              {
                "title": "Invalid domain name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 340,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "eda934c0-3e97-486d-a26b-2d9874891018",
                    "parentUUID": "585d3f7e-b3c8-4b5a-9091-c064668237ea",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "585d3f7e-b3c8-4b5a-9091-c064668237ea",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 340,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "eda934c0-3e97-486d-a26b-2d9874891018",
                    "parentUUID": "585d3f7e-b3c8-4b5a-9091-c064668237ea",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 340
              },
              {
                "title": "Invalid domain name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1245,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5d365d8c-2bc0-4ccc-a35b-d6de2bdf34b0",
                    "parentUUID": "8a90ff0b-e570-48ed-9ca6-6bdefe2ab741",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "8a90ff0b-e570-48ed-9ca6-6bdefe2ab741",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1245,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "5d365d8c-2bc0-4ccc-a35b-d6de2bdf34b0",
                    "parentUUID": "8a90ff0b-e570-48ed-9ca6-6bdefe2ab741",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1245
              },
              {
                "title": "Invalid domain name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1528,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "4a2711a9-22bf-47c1-9ceb-0f6a6040e0f4",
                    "parentUUID": "435c43a6-7e45-4a6c-80c4-47e9a01b31c1",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "435c43a6-7e45-4a6c-80c4-47e9a01b31c1",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "fullTitle": "OSS_013_09: If the domain in path is invalid. Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
                    "timedOut": false,
                    "duration": 1528,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "4a2711a9-22bf-47c1-9ceb-0f6a6040e0f4",
                    "parentUUID": "435c43a6-7e45-4a6c-80c4-47e9a01b31c1",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1528
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "3f9cb22b-2cbf-44d3-ace1-251b89da9a19",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_013_10: If the key param is invalid.",
            "suites": [
              {
                "title": "Invalid object name begins with number.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 600,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "38507bc3-5a76-41e2-b450-c321d69cd0e5",
                    "parentUUID": "9024f0f5-e2a9-4245-afe1-9a9831300ae9",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "9024f0f5-e2a9-4245-afe1-9a9831300ae9",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 600,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "38507bc3-5a76-41e2-b450-c321d69cd0e5",
                    "parentUUID": "9024f0f5-e2a9-4245-afe1-9a9831300ae9",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 600
              },
              {
                "title": "Invalid object name with unacceptable characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 972,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "8d7a2e4b-c195-40c8-8748-d230af700e48",
                    "parentUUID": "5a54b5f7-6209-4660-8925-41f7a30b9027",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "5a54b5f7-6209-4660-8925-41f7a30b9027",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 972,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "8d7a2e4b-c195-40c8-8748-d230af700e48",
                    "parentUUID": "5a54b5f7-6209-4660-8925-41f7a30b9027",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 972
              },
              {
                "title": "Invalid object name over 128 characters.",
                "suites": [],
                "tests": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1000,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "14af0ea7-83d1-4dcc-afd8-4afad7364d72",
                    "parentUUID": "bcfca7e2-148c-4055-b393-655821b7502b",
                    "skipped": false
                  }
                ],
                "pending": [],
                "root": false,
                "_timeout": 6000,
                "file": "/test/deleteObject.js",
                "uuid": "bcfca7e2-148c-4055-b393-655821b7502b",
                "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
                "passes": [
                  {
                    "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "fullTitle": "OSS_013_10: If the key param is invalid. Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
                    "timedOut": false,
                    "duration": 1000,
                    "state": "passed",
                    "speed": "slow",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
                    "isRoot": false,
                    "uuid": "14af0ea7-83d1-4dcc-afd8-4afad7364d72",
                    "parentUUID": "bcfca7e2-148c-4055-b393-655821b7502b",
                    "skipped": false
                  }
                ],
                "failures": [],
                "skipped": [],
                "hasTests": true,
                "hasSuites": false,
                "totalTests": 1,
                "totalPasses": 1,
                "totalFailures": 0,
                "totalPending": 0,
                "totalSkipped": 0,
                "hasPasses": true,
                "hasFailures": false,
                "hasPending": false,
                "hasSkipped": false,
                "duration": 1000
              }
            ],
            "tests": [],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "c25054ba-3810-4a66-a29f-7f1c55d0a2cb",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [],
            "failures": [],
            "skipped": [],
            "hasTests": false,
            "hasSuites": true,
            "totalTests": 0,
            "totalPasses": 0,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0
          },
          {
            "title": "OSS_013_11: Cannot find domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 776,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain, key: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a4d4ace1-573f-4769-86ca-aad4f6694ffa",
                "parentUUID": "a203b303-8ef2-4b60-80b2-32f37e0df8f0",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "a203b303-8ef2-4b60-80b2-32f37e0df8f0",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
                "timedOut": false,
                "duration": 776,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain, key: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "a4d4ace1-573f-4769-86ca-aad4f6694ffa",
                "parentUUID": "a203b303-8ef2-4b60-80b2-32f37e0df8f0",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 776
          },
          {
            "title": "OSS_013_12: Cannot find object.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 1247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// delete options.form.domain;</span><br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_object = <span class=\"hljs-string\">'invalid_object'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_object }, options.qs);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bf19446e-5b14-4494-92e1-7bd6d3e05ad9",
                "parentUUID": "ac9c9e66-8c6b-450b-8bea-fd8d5d61d0a8",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "ac9c9e66-8c6b-450b-8bea-fd8d5d61d0a8",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
                "timedOut": false,
                "duration": 1247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-comment\">// delete options.form.domain;</span><br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_object = <span class=\"hljs-string\">'invalid_object'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_object }, options.qs);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
                "isRoot": false,
                "uuid": "bf19446e-5b14-4494-92e1-7bd6d3e05ad9",
                "parentUUID": "ac9c9e66-8c6b-450b-8bea-fd8d5d61d0a8",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1247
          },
          {
            "title": "OSS_013_13: Successfully deleted json object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_13: Successfully deleted json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 3354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_json  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_json, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage - object_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "13159958-edee-4f12-9ccc-451ff3c158a1",
                "parentUUID": "d5cce02b-cb91-4ef6-80e2-c091d207fdcd",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "d5cce02b-cb91-4ef6-80e2-c091d207fdcd",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_13: Successfully deleted json object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 3354,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_json  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_json, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage - object_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "13159958-edee-4f12-9ccc-451ff3c158a1",
                "parentUUID": "d5cce02b-cb91-4ef6-80e2-c091d207fdcd",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3354
          },
          {
            "title": "OSS_013_14: Successfully deleted file object item.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_14: Successfully deleted file object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 4421,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_jpg, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage - object_jpg_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "e07d8776-9b5e-4408-981d-f59717fd2faa",
                "parentUUID": "c6d725f4-c780-494d-98c0-cba7d23df556",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/deleteObject.js",
            "uuid": "c6d725f4-c780-494d-98c0-cba7d23df556",
            "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
            "passes": [
              {
                "title": "Server should return {\"httpStatus\":200}",
                "fullTitle": "OSS_013: Delete Object API OSS_013_14: Successfully deleted file object item. Server should return {\"httpStatus\":200}",
                "timedOut": false,
                "duration": 4421,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_jpg, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage - object_jpg_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
                "isRoot": false,
                "uuid": "e07d8776-9b5e-4408-981d-f59717fd2faa",
                "parentUUID": "c6d725f4-c780-494d-98c0-cba7d23df556",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4421
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/deleteObject.js",
        "uuid": "1d2eaa3f-0776-4d1d-a587-47e6af002e1d",
        "fullFile": "/vagrant/object-storage-service/test/deleteObject.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_005: S3 Event Handler",
        "suites": [
          {
            "title": "OSS_005_01: Successfully updated domain file_usage and object usage.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return Domain file usage equals all uploaded Objects usages",
                "fullTitle": "OSS_005: S3 Event Handler OSS_005_01: Successfully updated domain file_usage and object usage. Server should return Domain file usage equals all uploaded Objects usages",
                "timedOut": false,
                "duration": 13408,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">var</span> before_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object2_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object2_usage;<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        before_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload domain usage: '</span>, before_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object1 usage: '</span>, before_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object2 usage: '</span>, before_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object1, domain_id, <span class=\"hljs-string\">'image/png'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object2, domain_id, <span class=\"hljs-string\">'image/jpg'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object1 usage: '</span>, after_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object2 usage: '</span>, after_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload domain usage: '</span>, after_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  expect(after_upload_object1_usage + after_upload_object2_usage).to.equal(after_upload_domain_usage);<br>})<br>.then((data) =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "87dce576-b75e-47a4-8b4d-1e1323aca864",
                "parentUUID": "83b60d38-f9a8-46a1-9f55-896b18d6f080",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/s3Handler.js",
            "uuid": "83b60d38-f9a8-46a1-9f55-896b18d6f080",
            "fullFile": "/vagrant/object-storage-service/test/s3Handler.js",
            "passes": [
              {
                "title": "Server should return Domain file usage equals all uploaded Objects usages",
                "fullTitle": "OSS_005: S3 Event Handler OSS_005_01: Successfully updated domain file_usage and object usage. Server should return Domain file usage equals all uploaded Objects usages",
                "timedOut": false,
                "duration": 13408,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">var</span> before_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object2_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object2_usage;<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        before_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload domain usage: '</span>, before_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object1 usage: '</span>, before_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object2 usage: '</span>, before_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object1, domain_id, <span class=\"hljs-string\">'image/png'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object2, domain_id, <span class=\"hljs-string\">'image/jpg'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object1 usage: '</span>, after_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object2 usage: '</span>, after_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload domain usage: '</span>, after_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  expect(after_upload_object1_usage + after_upload_object2_usage).to.equal(after_upload_domain_usage);<br>})<br>.then((data) =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "87dce576-b75e-47a4-8b4d-1e1323aca864",
                "parentUUID": "83b60d38-f9a8-46a1-9f55-896b18d6f080",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 13408
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/s3Handler.js",
        "uuid": "854ecac1-5cf4-4a56-b45e-1a3f68060a33",
        "fullFile": "/vagrant/object-storage-service/test/s3Handler.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      },
      {
        "title": "OSS_014: Housekeeping",
        "suites": [
          {
            "title": "OSS_014_01: No message in SQS.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return SQS is empty",
                "fullTitle": "OSS_014: Housekeeping OSS_014_01: No message in SQS. Server should return SQS is empty",
                "timedOut": false,
                "duration": 3712,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload)).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload).message).to.equal(<span class=\"hljs-string\">'SQS is empty'</span>);<br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "0774827f-b8f1-43ca-9916-10414a83cf5f",
                "parentUUID": "c48f7a97-9183-4df7-a8b3-9b8ccb0e06ec",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/housekeeping.js",
            "uuid": "c48f7a97-9183-4df7-a8b3-9b8ccb0e06ec",
            "fullFile": "/vagrant/object-storage-service/test/housekeeping.js",
            "passes": [
              {
                "title": "Server should return SQS is empty",
                "fullTitle": "OSS_014: Housekeeping OSS_014_01: No message in SQS. Server should return SQS is empty",
                "timedOut": false,
                "duration": 3712,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload)).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload).message).to.equal(<span class=\"hljs-string\">'SQS is empty'</span>);<br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "0774827f-b8f1-43ca-9916-10414a83cf5f",
                "parentUUID": "c48f7a97-9183-4df7-a8b3-9b8ccb0e06ec",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 3712
          },
          {
            "title": "OSS_014_02: No Object and S3 files.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return Deleted SQS message.",
                "fullTitle": "OSS_014: Housekeeping OSS_014_02: No Object and S3 files. Server should return Deleted SQS message.",
                "timedOut": false,
                "duration": 8117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "dbe94fd4-f4f7-4e6e-b70d-9e7853e64a05",
                "parentUUID": "efd98e2f-d01b-4e6b-b54f-f4e7c584efaa",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/housekeeping.js",
            "uuid": "efd98e2f-d01b-4e6b-b54f-f4e7c584efaa",
            "fullFile": "/vagrant/object-storage-service/test/housekeeping.js",
            "passes": [
              {
                "title": "Server should return Deleted SQS message.",
                "fullTitle": "OSS_014: Housekeeping OSS_014_02: No Object and S3 files. Server should return Deleted SQS message.",
                "timedOut": false,
                "duration": 8117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "dbe94fd4-f4f7-4e6e-b70d-9e7853e64a05",
                "parentUUID": "efd98e2f-d01b-4e6b-b54f-f4e7c584efaa",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8117
          },
          {
            "title": "OSS_014_03: Successfully deleted object items in DB and S3 object files under domain.",
            "suites": [],
            "tests": [
              {
                "title": "Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
                "fullTitle": "OSS_014: Housekeeping OSS_014_03: Successfully deleted object items in DB and S3 object files under domain. Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
                "timedOut": false,
                "duration": 8353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-comment\">// console.log(data);</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "ab7e05ac-d409-4103-b78f-d93a3d3e1159",
                "parentUUID": "a2c446be-55af-4fe4-8c6b-30383fb25313",
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 6000,
            "file": "/test/housekeeping.js",
            "uuid": "a2c446be-55af-4fe4-8c6b-30383fb25313",
            "fullFile": "/vagrant/object-storage-service/test/housekeeping.js",
            "passes": [
              {
                "title": "Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
                "fullTitle": "OSS_014: Housekeeping OSS_014_03: Successfully deleted object items in DB and S3 object files under domain. Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
                "timedOut": false,
                "duration": 8353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-comment\">// console.log(data);</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
                "isRoot": false,
                "uuid": "ab7e05ac-d409-4103-b78f-d93a3d3e1159",
                "parentUUID": "a2c446be-55af-4fe4-8c6b-30383fb25313",
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 8353
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 6000,
        "file": "/test/housekeeping.js",
        "uuid": "e2e278d9-5220-4b41-a997-6822188ee9f7",
        "fullFile": "/vagrant/object-storage-service/test/housekeeping.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 6000,
    "uuid": "8f7168f3-fd86-4612-a0b5-bc654accc5cc",
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_003_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1382,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cbc7931d-421c-4d0c-8c7d-fff620cc4b6d",
      "parentUUID": "fffc2692-639d-40dc-86e2-614d60a9dd96",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_003_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1230,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "35967d09-818e-4e1f-953e-826bb700afd6",
      "parentUUID": "57ce8a5e-03f5-4bfb-b60a-8a6ab73cfcd1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_003_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 763,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "946ae2de-dcbb-4ccc-9891-eae0619a9372",
      "parentUUID": "f999dcc4-9444-4d5f-89a9-b07e7c8329ad",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_003_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0172f4ae-b0d3-40c3-90c5-9529a2f2cf44",
      "parentUUID": "034a917e-7e67-4eb0-af83-cfefd934a77a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_003_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 467,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "30e57945-36b1-4fe0-a19b-0acf1343c2b8",
      "parentUUID": "9e5aa14d-3750-4b0b-b75d-04943a8c0cf7",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_003_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 2641,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9a53c9f6-d053-471b-a667-70f19e2d977a",
      "parentUUID": "ffa1b817-9798-4fdd-bb31-73e63710bf45",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_003_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2d77f0b0-4ec7-408f-a230-97340ffd33e7",
      "parentUUID": "2fc2f46b-6e01-4a49-b05b-30a7be72dfb3",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_003_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1681,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f292ecf1-0e1c-46c2-8ae6-3af0dab0b91b",
      "parentUUID": "d19bd25f-c760-4f01-aad7-c7c9cbe25a85",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
      "fullTitle": "OSS_003_09: If the domain param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
      "timedOut": false,
      "duration": 1132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.domain;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a85999b1-1dcc-4729-9234-8ce5b010f82c",
      "parentUUID": "a0f7fd86-b81d-4b5d-baf1-3659e7f223c4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 369,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.domain = <span class=\"hljs-string\">'111_test_domain_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a5196c02-72ae-4b6f-b4b6-77a461844a6b",
      "parentUUID": "f2ed5e83-554d-4e94-843f-3e4b2e9d401f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.domain = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0061d2e8-92f6-47cb-9697-8092b0516547",
      "parentUUID": "68a78a62-4923-4438-8351-747f515f7794",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 735,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.form.domain = invalid_domain_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "177b8cf4-eaab-474e-a28b-b1638cffbccb",
      "parentUUID": "56888708-af84-4e08-bd3b-7721cc725811",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "fullTitle": "OSS_003_11: If the domain already exists. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "timedOut": false,
      "duration": 1003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1601eb26-5244-4c79-9966-13170062132f",
      "parentUUID": "a0ec5ee0-4c3a-4452-8310-02daa47d26ae",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
      "fullTitle": "OSS_003_12: If it has already reached 2 domains limit. Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
      "timedOut": false,
      "duration": 2220,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_limit.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_limit.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "007d8fb8-9036-4feb-904c-50cffb0f3239",
      "parentUUID": "55b703f4-437d-4a39-8798-1c9a068ba1ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_003_13: Successfully created domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 5481,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> createDomains = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`create domains .....`</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      createDomains()<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>            testHelper.getDomain(cloud_id, app_id, options.form.domain, (err, domain) =&gt; {<br>              <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> reject(err);<br>              <span class=\"hljs-built_in\">console</span>.log(domain);<br>              expect(domain).to.have.all.keys([<br>                <span class=\"hljs-string\">'cloud_id-app_id'</span>,<br>                <span class=\"hljs-string\">'name'</span>,<br>                <span class=\"hljs-string\">'app_id'</span>,<br>                <span class=\"hljs-string\">'created_at'</span>,<br>                <span class=\"hljs-string\">'created_by'</span>,<br>                <span class=\"hljs-string\">'file_usage'</span>,<br>                <span class=\"hljs-string\">'id'</span>,<br>                <span class=\"hljs-string\">'json_usage'</span>,<br>                <span class=\"hljs-string\">'updated_at'</span>,<br>                <span class=\"hljs-string\">'updated_by'</span><br>              ]);<br>              customs.domain_id = domain.id;<br>              expect(domain[<span class=\"hljs-string\">'cloud_id-app_id'</span>]).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cloud_id}</span>-<span class=\"hljs-subst\">${app_id}</span>`</span>);<br>              expect(domain.name).to.equal(domain_name);<br>              resolve();<br>            }); <span class=\"hljs-comment\">// getDomain</span><br>          }); <span class=\"hljs-comment\">// Promise</span><br>        })<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
      "isRoot": false,
      "uuid": "f352929e-3628-4965-87a6-79f846ad5faa",
      "parentUUID": "258116e0-b8b2-4e1b-abf8-596139b1a45c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_010_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1503,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b3cde86e-d33f-4e60-968c-df330ceb8bfc",
      "parentUUID": "fe74adf0-e27b-43e2-b55d-851d36b6c33b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_010_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 611,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a9da500a-c76f-45c0-8b2f-974de0ec8da0",
      "parentUUID": "5d83e199-ca97-4fbd-abc8-f3b23e50493c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_010_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1878,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "652b3497-9cf8-441a-8276-737725fb0058",
      "parentUUID": "57d371a4-4b72-4061-99af-e835f683ac07",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_010_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1997,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "19c67706-37ed-4f26-9d14-85f24374b4c6",
      "parentUUID": "e56f3be0-f9d1-4f4f-bcf0-45236e9a2864",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_010_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1379,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a49779bf-9a59-4a01-91c9-1c4f7a6f2e05",
      "parentUUID": "61b255d9-882e-4d18-9935-2c7c739582e6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_010_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 727,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "de1ba4dd-ea38-4e52-af4e-ce763a44dc8e",
      "parentUUID": "5c141c72-2bc8-483c-8198-52d985d0a2f2",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_010_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1381,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f584cca0-e9a9-4791-8e4c-2ecfab8b9054",
      "parentUUID": "9b0dbfc9-b3f0-4f46-8865-3d39624d1469",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_010_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "55153c3a-de98-41e1-bc04-224934a3c34b",
      "parentUUID": "1f27972b-dbdb-49c9-b73b-46e8326df8a4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 764,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9c1f2291-1da5-49ba-9948-1c3686751307",
      "parentUUID": "a3de6cc0-41b6-4a97-aba8-e80ac291eaa8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 414,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4a1db63c-108a-4a18-bc3a-26da57737f9d",
      "parentUUID": "77ff0794-f93e-4245-bf8f-a3a3e2b116c5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 769,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1f214bbd-ad6e-4524-b085-e8d85388bb07",
      "parentUUID": "00f3d8e8-f1c1-4fad-89cd-b3d1d3567f64",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 380,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_domain = <span class=\"hljs-string\">'111_invalid_new_domain_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ae01b1b3-64bd-4403-a642-df056807663f",
      "parentUUID": "3608933e-d7e1-4514-827b-4c15752d7800",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 1534,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_domain = <span class=\"hljs-string\">'invalid_new_domain_*_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e6269151-0895-4a6d-ac8e-b349c8531e7d",
      "parentUUID": "ccf78d7b-4260-4024-b4a6-0a796f5bf2eb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_new_domain_name = new_domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_new_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_new_domain_name += (<span class=\"hljs-string\">'_'</span> + new_domain_name);<br>        }<br>        options.form.new_domain = invalid_new_domain_name;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b2a087dc-e2ff-4e56-a456-ab0d38ffd49a",
      "parentUUID": "a9203e6c-6fef-4c9a-97a6-5da26eb15bca",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_010_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "67535635-c278-4398-a869-5b4a5ed5d913",
      "parentUUID": "847ecf7f-8ee0-4113-822a-6ca6f3db7aba",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "fullTitle": "OSS_010_12: Cannot update domain item. New domain has already exist. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "timedOut": false,
      "duration": 1037,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "089c9d02-ddd9-4a08-b3ac-fd2dc425a13a",
      "parentUUID": "edbfbf24-88c3-4168-b157-ed4cac14285a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_010_13: Successfully updated domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2317,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> updateDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>updateDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, new_domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">false</span>);<br>          expect(data.id).to.equal(domain_id);<br>          expect(data.name).to.equal(new_domain_name);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "97362e7a-ea66-44d1-905e-c16c39af2f11",
      "parentUUID": "0432934f-9b13-4488-ad33-93770c64aecc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_006_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c67db2d0-ef05-4b4a-8f06-9aae95ca772b",
      "parentUUID": "6ca33348-5763-4a1d-a992-8835d3bb5d38",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_006_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 781,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "3c6425f7-ac07-48b5-ba88-6b0f2d5f41de",
      "parentUUID": "cca49df5-cb8f-4a88-ab5b-0517c6273170",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_006_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 658,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8044917d-0568-4d8f-8b00-1b42db69dc4e",
      "parentUUID": "0bb1c158-f266-4abc-98f6-f9fad6b74709",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_006_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f1bb7713-e0c9-471a-ade0-b352d7b2e69f",
      "parentUUID": "11b1c835-d983-4802-8694-96d34b1a50e5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_006_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1e2f5926-3989-4364-b891-c03d63245638",
      "parentUUID": "ab268227-931a-4137-9eba-31f836fa126b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_006_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 337,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "3e3c95c2-b11e-445f-a675-b87320c939fa",
      "parentUUID": "b8e8b68e-1cb3-4058-9331-4aaf39532953",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_006_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 475,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "045e0280-2ca9-44a7-a16b-e0180d696cf5",
      "parentUUID": "e9121994-1d3d-44d5-86d8-49dcdf0f88cc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_006_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1636,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9d66bac0-1976-42ef-833b-173e82f41a72",
      "parentUUID": "26d1d20c-60bb-4d83-b33a-b87ebcfafb41",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "74a1fdf5-7563-4fc5-b4a9-2c9a1502557e",
      "parentUUID": "5700b24f-d335-444a-aa4c-9ba451ead634",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cff7c99b-261f-4527-8ead-2aee5df79080",
      "parentUUID": "87037c31-dfbb-40a6-8f9b-bef088e04e4e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1803,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "82fd22ce-9798-415f-ac43-ddfd96191c34",
      "parentUUID": "708e6086-1fa3-493c-a853-7d6335cd2f85",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_006_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 2204,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain_name'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f53d9bf0-ac26-4300-be30-009e42762518",
      "parentUUID": "cc013bab-836b-4a91-be56-42368e9ae5b6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_006_11: Successfully got domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "43590b47-771e-49c5-9199-eb35ded89265",
      "parentUUID": "e47509e0-e930-4fe1-b8db-2e9af5d00163",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_008_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 361,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b4de8d7d-9ed9-41d3-bef3-2c2023fa1582",
      "parentUUID": "6a3b2b74-61d4-455f-b67f-a3f33d204ade",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_008_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 819,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d28daee0-8159-4329-bce1-594840de0115",
      "parentUUID": "20fa95e6-40e4-43ea-9777-7fe331bbf150",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_008_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "421536e4-e6d5-409e-966b-b50e2233ed28",
      "parentUUID": "0daab94d-ae93-46c1-80ef-8d4b2d15b723",
      "skipped": false
    },
    {
      "title": "Should return 'Missing Required Header: X-Signature'",
      "fullTitle": "OSS_008_04: If the X-Signature Header in request is missing. Should return 'Missing Required Header: X-Signature'",
      "timedOut": false,
      "duration": 1339,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "afd2c831-ede6-4d40-a8d3-d2993537ea3c",
      "parentUUID": "9d6bb93b-72ee-4067-a176-f442c9996c00",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_008_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 312,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6a5bf808-5700-4c10-aa61-3363706366b5",
      "parentUUID": "491f14af-7bef-4256-8f3f-d55e530df810",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_008_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 412,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c0f7abc9-4889-4ba6-8461-a976263bc066",
      "parentUUID": "c7fbc191-c291-411a-b65f-54e95368a478",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_008_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 898,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1689fa06-550f-4623-8dbc-c00246b5944b",
      "parentUUID": "d31cf60b-2b0b-42c0-a212-51b055fc1fdd",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_008_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1700,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "355faf14-a556-4d56-a567-0a41912dd543",
      "parentUUID": "2f6d9688-8288-4c49-868b-b336f5298db8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
      "fullTitle": "OSS_008_09: Successfully list empty domain item. Server should return {\"httpStatus\":200,\"data\":[]}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "err": {
        "name": "AssertionError",
        "message": "expected 404 to equal 200",
        "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listDomains.js:380:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "79b12d16-b191-4948-b9f3-f1223322802d",
      "parentUUID": "2d87a24c-d21b-4236-95a0-b161f3d9ceeb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_008_10: Successfully list domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 722,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "3c1274d7-f189-4ef1-bd25-9a5415e5524a",
      "parentUUID": "3e7913dd-09bc-4b08-8793-b8be2e7f99b1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_012_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "afecd6e1-7369-44bb-bf9b-df6d41230b74",
      "parentUUID": "bc0a7a60-1d0f-44e6-bd7a-be88bb03e14e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_012_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 479,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "54c8616a-0217-4725-b398-172da0e842b2",
      "parentUUID": "9f7f2ab1-0f0c-4795-93b8-353c5c0abc25",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_012_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1469,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "deecb6f9-d908-4784-8a3f-b00189f85ff3",
      "parentUUID": "5fd92072-0d2e-425d-a8eb-4a2aa972cfc7",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_012_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "32e279ec-eb73-427d-a7c6-b735654b8b5d",
      "parentUUID": "e533fd75-170e-4507-b594-a00572bdf536",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_012_05: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 2477,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e23cf1aa-e700-4598-ae01-009f3723f832",
      "parentUUID": "d87a2a64-0943-432f-82de-c48e79d94426",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_012_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1076,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9489c846-7746-48b4-bf44-8e0f31131f71",
      "parentUUID": "77e5da18-9732-4953-9667-d9b63ceb1298",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_012_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1022,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "090794e1-d7c1-4518-b197-168663acf935",
      "parentUUID": "7e007d96-3f52-4401-872c-537ef80f5ffb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_012_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 443,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ba96239e-f4f2-4a7f-bb83-d13a75355ad3",
      "parentUUID": "51735b25-6d71-4b99-a446-4ff1be8b63ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "554180ca-dd95-4899-9a37-4be689f87720",
      "parentUUID": "1ee1cca4-ce42-40d2-ac88-068920fbbd2c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1083,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cad0af01-e667-42bd-a8bd-410229ef2609",
      "parentUUID": "e6f3035b-20c6-49d5-8ce5-a83faac88a67",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1353,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7c3fd3b8-ebdb-44f5-91d4-a7c199e7c331",
      "parentUUID": "f9846923-4d4c-46f1-91c6-30615c9b2eb9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_012_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1995,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7b1d3e55-f30b-4abc-be47-a7139e7b30ab",
      "parentUUID": "d48ce91c-ac36-4d5f-a9eb-b6d2ffc7aa37",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_012_11: Successfully deleted domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 4165,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          <span class=\"hljs-comment\">// console.log(err.name)</span><br>          <span class=\"hljs-comment\">// console.log(err.message)</span><br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          <span class=\"hljs-comment\">// expect(data.id).to.equal(domain_id);</span><br>          <span class=\"hljs-comment\">// expect(data.name).to.equal(new_domain_name);</span><br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "6b2fda18-f38d-4b45-9dbf-225c11cd2915",
      "parentUUID": "b672b931-76a8-4b1e-bfda-bad5b983f55e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_004_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1197,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ec18e2da-ff9f-4f90-9eaa-946147ccd4e2",
      "parentUUID": "e72b71b2-eab0-485c-ba5f-8928cace9ff3",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_004_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 844,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "34d0488e-bceb-4d81-ac91-b255c657498b",
      "parentUUID": "b5256359-88db-4115-b185-8d6adea2ac61",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_004_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e3fb9d16-b3c7-4f2f-b2cb-6c8c9f509e88",
      "parentUUID": "d9488345-5e32-4455-a252-da37acc83670",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_004_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1150,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "adc34250-28a1-4f94-a52f-3297a5013b86",
      "parentUUID": "de4bc6c4-8443-498a-ae4c-158bc9e345c4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_004_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 361,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ae40c7d4-d3bd-4ab3-b9c1-07c0d9f99315",
      "parentUUID": "6afcc243-89f5-4399-bb47-85640a7baacf",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_004_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 366,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5083655d-b677-41cb-b3c6-8fa1a5c34570",
      "parentUUID": "5783b571-9e45-4db8-8f6c-c935ec9145c1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 305,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5af9350c-c17c-48b4-b4f3-91a0135d0b49",
      "parentUUID": "d23805fb-2bca-43b2-b072-14ef7a1cebf5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 907,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0df64b1a-3088-4f9b-bb12-933796d4bd81",
      "parentUUID": "c4b5d2bf-afeb-4942-900f-e4c297084704",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 287,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form[<span class=\"hljs-string\">'key'</span>] = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ebd8d70e-d640-4ca9-8a7d-78202dad57cd",
      "parentUUID": "315bf232-fb01-4a02-8f5a-3a163941819b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "fullTitle": "OSS_004_08: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "timedOut": false,
      "duration": 477,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8b0a30c9-b517-41a3-8723-fb0fdfc520e0",
      "parentUUID": "20572f58-74d1-42b9-9693-725cca6f161d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "fullTitle": "OSS_004_09: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "timedOut": false,
      "duration": 342,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ed6d72b9-3b9c-40dd-89d6-d725ded521d4",
      "parentUUID": "eb53ba9e-5961-426d-9cea-0eb560f77a83",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "fullTitle": "OSS_004_10: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "timedOut": false,
      "duration": 478,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "02e0918e-e9d5-423c-8bb4-09bccab73fbd",
      "parentUUID": "26bfe323-aa74-492f-88a9-90b6f3bcd485",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "fullTitle": "OSS_004_11: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "timedOut": false,
      "duration": 565,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d35866f8-cb36-4d29-98a7-3bf7e211359c",
      "parentUUID": "6df0f4c9-3d50-4525-990d-73d3d56cfd50",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_004_12: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 372,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2f734141-f178-487f-8bd8-b67601f20969",
      "parentUUID": "30a7e485-314d-42c9-9c1a-7e0bf637a31e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_004_13: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 775,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c9f79fc0-e740-4414-9cb7-7254374179dd",
      "parentUUID": "c2b843b6-14e2-4491-8f6e-f8a4a9ec2a86",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_004_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 870,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'domain'</span>] = <span class=\"hljs-string\">'unavailable_domain'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "381bb329-7d04-45fe-95bc-1900645cbbdb",
      "parentUUID": "3bb8d804-2417-4ec7-a202-ef9b1120a404",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "fullTitle": "OSS_004_15: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "timedOut": false,
      "duration": 540,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "05a42ee5-42aa-46f5-8465-00a6e7563018",
      "parentUUID": "f31ad34c-f7d6-4eaf-a6bd-ed3c589a9ae5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_004_16: Successfully created json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1919,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2fc8783b-243f-4b8d-bcc4-fe01067856e3",
      "parentUUID": "26eb36b0-c564-449b-9399-01cef3390020",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_004_17: Successfully created file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 2442,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`body: <span class=\"hljs-subst\">${body}</span>`</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`typeof data: <span class=\"hljs-subst\">${typeof body}</span>`</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c6182546-7afb-4e3e-aaf3-b377637b51ee",
      "parentUUID": "716ea079-92e3-497a-adca-24affa0ee4f8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_004_18: Successfully created json object item with content contains chinese words. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\"key\":\"一二三\"}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 200",
        "stack": "AssertionError: expected 400 to equal 200<br>    at Request._callback (test/createObject.js:763:44)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "da851721-016e-44d2-b610-25fc971d7cc7",
      "parentUUID": "1e14d21c-e594-43fb-b8fc-23a008e79ba6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_011_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "90cc7723-19a9-466e-87b6-c903746be85c",
      "parentUUID": "21757952-87c0-439a-bd63-498ef9453f03",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_011_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1747,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "903e15a6-5ed0-43d9-b83d-2cb8fc5f32e0",
      "parentUUID": "f3e21e63-b636-4631-9e8c-3142efee8004",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_011_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 384,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "70a9853b-b8c8-40b1-8bf8-f0d7ef2ad6c9",
      "parentUUID": "c6daa9b6-f2d0-43d2-a111-c7b6758280fc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_011_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1303,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ca304951-fe85-4ca1-a9c2-039a44f7ee2e",
      "parentUUID": "95b98e46-5525-4e69-8271-c146c13e6c29",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_011_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "842ed7cc-e2cd-4b6d-b44e-c0e3e7a8f5b9",
      "parentUUID": "61b4c9fa-4bb8-4ba7-aa6e-6426d38cb746",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_011_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "118b850f-50b2-4467-8bb5-50a5ad8baf8d",
      "parentUUID": "e6e67ba9-cac3-46d0-965d-f8d21c38430a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_011_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1063,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "81e205e5-b0c3-4761-ae3f-b7b84225d0dd",
      "parentUUID": "4a709326-5bd3-466c-88c9-1512003849e1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_011_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 967,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "315f13a4-6ade-4a8a-839f-b35302c07f8c",
      "parentUUID": "55b1b461-40dd-4e59-8fbe-c15131a84490",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1475,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b4a148ba-011a-4620-9a82-fceb7d5170ed",
      "parentUUID": "66da235b-755d-4aaf-9838-4dd71b37c166",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1447,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8ac4c313-d47b-44da-b6df-447ee1f1e4ea",
      "parentUUID": "ef8a4713-8290-4e6a-b9f8-9cb3c248e2a5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form.new_key = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b3534bb4-72ed-4c57-bc2d-58dfd2092d5f",
      "parentUUID": "caefa5d4-a63d-4662-b360-3122d35bd827",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "fullTitle": "OSS_011_10: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "timedOut": false,
      "duration": 920,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "06c4fd06-7c2e-4646-b334-86c7d1d05379",
      "parentUUID": "791cfac2-79da-4b97-997c-a10f4782545c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "fullTitle": "OSS_011_11: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "timedOut": false,
      "duration": 806,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4c5a9cb3-0fb6-4df4-b073-d86f1b5b56f8",
      "parentUUID": "52816e94-f4b3-430f-adb3-ebaa79cf14f1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "fullTitle": "OSS_011_12: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "timedOut": false,
      "duration": 316,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0ff0cd66-49e1-48b0-a679-1f3304fdd631",
      "parentUUID": "4fbe726e-ca53-4ef2-97a9-27929151594e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "fullTitle": "OSS_011_13: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "timedOut": false,
      "duration": 1532,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "000e9976-738b-4192-bcd3-a17f84787dc2",
      "parentUUID": "505135f6-e8e7-4a73-b945-53ede2a9c342",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_011_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 2006,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.setFormAndPath({ domain: <span class=\"hljs-string\">'unavailable_domain'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a8ba2c53-14a3-45b8-b101-580f0a6b7ea1",
      "parentUUID": "05e6be11-d44e-4843-95f6-22da851e1ebb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_011_15: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 580,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.setFormAndPath({ key: <span class=\"hljs-string\">'unavailable_object'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.object.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "faba4c14-b27b-4b94-8a2f-4bf9ce2994d0",
      "parentUUID": "ae6cea8f-bc46-47f1-984f-ccb27db17261",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "fullTitle": "OSS_011_16: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "timedOut": false,
      "duration": 1911,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = customs.new_key;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ec495470-4475-48a2-819b-6939005e9f6b",
      "parentUUID": "d0b41345-aca2-483a-b417-573017690d52",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2618,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "629c6abd-948c-40a8-8d54-5077eca0ee18",
      "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2692,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_key_2'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6d5ef837-a5bc-4579-8514-67c56ce1ce73",
      "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_011_18: Successfully updated json object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 2717,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(<span class=\"hljs-number\">0</span>);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage - customs.old_item_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "df97adc9-8c79-4bf5-98d7-739fb0c816de",
      "parentUUID": "dfe9a52d-9573-434e-9e67-c17a89f6aa21",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_011_19: Successfully updated file object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 3313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.setFormAndPath({ key: customs.file_key });<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form[<span class=\"hljs-string\">'new_key'</span>], (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(customs.old_item_usage);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "82bd9262-6ced-4f21-8f75-308595f602c8",
      "parentUUID": "6eaad0b0-e567-4ff5-8258-604c3531f29f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_20: Successfully updated file object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": true,
      "duration": 6000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> params = {<br>        content_type: <span class=\"hljs-string\">'application/json'</span>,<br>        content: <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span><br>      }<br>      customs.new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(params.content), <span class=\"hljs-string\">'utf8'</span>);<br>      <span class=\"hljs-keyword\">let</span> expectedCode = <span class=\"hljs-number\">200</span>;<br>      <span class=\"hljs-keyword\">let</span> expectedBody = { <span class=\"hljs-string\">\"data\"</span>: { <span class=\"hljs-string\">\"upload_url\"</span>: {} } };<br>      <span class=\"hljs-keyword\">let</span> path = { domain: customs.domain_name, key: customs.file_key };<br>      setRequest(options, params, path)<br>        .then((options) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> sendRequest(options);<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> assertResponse(data, expectedCode)<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getObjectItem(customs.cloud_id, customs.app_id, customs.domain_id, customs.file_key);<br>        })<br>        .then((objItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`objItem: <span class=\"hljs-subst\">${JSON.stringify(objItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> properties = [<span class=\"hljs-string\">'usage'</span>, <span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'content_type'</span>, <span class=\"hljs-string\">'domain_path'</span>, <span class=\"hljs-string\">'path'</span>, <span class=\"hljs-string\">'created_at'</span>, <span class=\"hljs-string\">'updated_at'</span>];<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            usage: customs.new_item_usage,<br>            content: options.form[<span class=\"hljs-string\">'content'</span>],<br>            domain_path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>,<br>            path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${customs.file_key}</span>`</span><br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(objItem, properties, expected_values);<br>        })<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getDomainItem(customs.cloud_id, customs.app_id, customs.domain_name);<br>        })<br>        .then((domainItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            file_usage: (customs.original_domain_file_usage - customs.old_item_usage),<br>            json_usage: (customs.original_domain_json_usage + customs.new_item_usage)<br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(domainItem, <span class=\"hljs-literal\">null</span>, expected_values);<br>        })<br>        .then(() =&gt; {<br>          done();<br>        })<br>        .catch((error) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`error: <span class=\"hljs-subst\">${error}</span>`</span>);<br>          done(error);<br>        })",
      "err": {
        "name": "Error",
        "message": "Timeout of 6000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
        "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "8ab57641-1e9a-4ea5-9e2b-be3ae7796912",
      "parentUUID": "de7b87c4-9556-4f49-ae5d-8777c91a0ca9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_007_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 479,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7606c414-5d3b-49f5-ad39-a734fd0e1acb",
      "parentUUID": "93c599a6-5685-4434-836b-d162e5b140b6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_007_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 905,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "bb3326b9-ae7b-4254-8f34-51959d4315ea",
      "parentUUID": "c9e47621-c564-4841-89e1-ec14c09ce09e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_007_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 332,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6f6a8f73-7ecc-4eb0-bbdd-143c8215ad26",
      "parentUUID": "bf2f72c9-0c91-4908-ba82-913f14631fe4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_007_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 492,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f4eb086c-b311-4b05-9a62-06a395aee5d9",
      "parentUUID": "60c72b52-0e28-4d9c-9e68-6cc0f742bb51",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_007_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 2017,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "41706673-e2b6-439b-a96b-131d73578cc9",
      "parentUUID": "99d038f1-bb1f-49ab-a0eb-33f6aed68d7d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_007_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 2048,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "502063ae-953f-4f14-b217-82a061fabfc0",
      "parentUUID": "eab262af-3c59-4c3e-abd3-6a6b730b97bb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_007_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 915,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b303a4ea-3f49-48f5-b592-3528a266322b",
      "parentUUID": "8c9e7b65-bab5-49e3-80d8-fb49cef059bb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_007_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 915,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e6e455ac-4808-4b8f-bbd5-36dfaacac1e9",
      "parentUUID": "6c46c35b-4607-45fa-a5fa-f4a23c03dd1a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 877,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "752d9cee-c661-408b-bad1-e9d122729ce3",
      "parentUUID": "1afdfee0-d46f-4e65-82d6-d0158423cc5f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 760,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "feb5c59c-bff7-4089-b706-15c1536fa551",
      "parentUUID": "4afb61fa-b260-4323-b6da-9885402dc8ed",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 737,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "289acb00-11dc-40af-86a0-ed6b3a1855e0",
      "parentUUID": "8a83b054-5cbd-4f08-a475-0b6f02048d86",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "63399c0d-0ed1-49da-8eeb-19b093b5d0af",
      "parentUUID": "136f0326-eeec-4508-ac6b-c5c8a0efd398",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1597,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "66996ce8-de1f-4d39-a202-a28e29f1d920",
      "parentUUID": "d5874a01-3196-43d6-9fe5-42550de9c499",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 505,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2caa3370-b0c2-4bd1-93e6-1adcb1ca7b5c",
      "parentUUID": "38854af9-266e-4e4f-b673-cadfee78d79a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_007_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1097,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4a4f2030-7460-4cf7-bbd7-0ff2e6491bb2",
      "parentUUID": "f7733929-cd3a-4ab8-9095-3dae48646a0d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_007_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 1099,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_object_name = <span class=\"hljs-string\">'invalid_object.jpg'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object_name}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: invalid_object_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>              <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>              expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>              expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      getDomain()<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
      "isRoot": false,
      "uuid": "ab5c732f-976b-4297-b3b3-19a2b1244787",
      "parentUUID": "d4f026b3-a1af-46a3-918c-3c2912904874",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_007_13: Successfully got object file item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2327,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"final result\"</span>);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        expect(isEmpty(body)).to.equal(<span class=\"hljs-literal\">false</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "09626e98-2abb-4ed5-b010-1bf5d34225be",
      "parentUUID": "68831042-6074-46ad-814e-05e048e94065",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_007_14: Successfully got object json item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1496,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_json }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(body);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        <span class=\"hljs-comment\">// 因為在 testHelper.createObjectItem 內是填入 { \"message\" : \"OK\" }</span><br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.message).to.equal(<span class=\"hljs-string\">'OK'</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "a533dde5-8b37-44d9-a42b-b5e6af0d1f8a",
      "parentUUID": "0ac64404-5c04-4d0d-a310-d9f2c153e45e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_009_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1549,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f9fa73bb-2584-4d78-91f2-68f8e93ca7e1",
      "parentUUID": "30c904e5-a9e3-4a12-93e0-61084f9a5407",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_009_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 611,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "77bcd0b2-21c6-42fc-a2ea-cfeac0fd308f",
      "parentUUID": "98c03b10-aaac-4643-bc91-feafeb176d71",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_009_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1518,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "007018ab-9716-406a-9c8e-2a755d9f85d4",
      "parentUUID": "7f85e8e4-cf42-480f-ac75-3a84429d70b9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_009_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1036,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "df159793-1864-4db5-9908-e6fdb07a48a5",
      "parentUUID": "61d9b3ea-14b7-4804-9dca-e0e2c0e259ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_009_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1838,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "3a9c7c34-8a59-4429-a0d4-c1dda90e797c",
      "parentUUID": "6bdd4ceb-5454-4163-bb68-60db2dd7204b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_009_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1593,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "15eb320c-d9d5-493d-85c9-49afd6ae8d91",
      "parentUUID": "34d1be57-85b0-4741-a15b-f4b22c9ee485",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_009_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 947,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "dd1cc373-464e-4bcf-bae8-bfaa43fbc514",
      "parentUUID": "58a73dc3-da96-48f2-ac2a-786ba4222ee8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_009_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 851,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "40d790ef-11a3-49ad-aaf8-0d6a5838a07d",
      "parentUUID": "1b135472-196c-4b74-a408-576733826183",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 960,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cfc156ff-3791-4fad-8def-d6139fde6a46",
      "parentUUID": "81fbb4ab-0bb9-4804-a233-369f089a4df4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 2323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a3072f33-131b-4496-b70e-05d3d923ef0a",
      "parentUUID": "fc9b2ecb-36fd-44b7-a025-447aee5b9132",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 331,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b7be7f15-802f-442a-9115-0b0f4bbefe40",
      "parentUUID": "b3361054-30dc-450f-9d4e-5a233c257d20",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_009_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1713,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>        expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "1a13ec8d-38ce-42fc-a867-13a82558d6c2",
      "parentUUID": "85b86fc9-1988-4fbb-b203-c4b5b5478094",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
      "fullTitle": "OSS_009_11: Successfully list empty object item. Server should return {\"httpStatus\":200,\"data\":[]}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "err": {
        "name": "AssertionError",
        "message": "expected 404 to equal 200",
        "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listObjects.js:561:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "72d40f25-7c67-408c-a982-5ffe2f7b5bcf",
      "parentUUID": "233b7ec8-75f9-4324-ad74-8be8826234c5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_12: Successfully list objects by all. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1017,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(parsedBody.data[<span class=\"hljs-number\">1</span>].key).to.equal(object2);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "20d1a084-7e2a-479a-b45d-71e2e343fd16",
      "parentUUID": "0c51d41b-4f2e-4204-84cc-2f52f53c6137",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_13: Successfully list objects by key. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1681,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.key = object1;<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(options);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "1543e55c-096d-4435-baec-d936ab345117",
      "parentUUID": "34b9a89f-1c6d-4b27-831e-ff5dc32a99a1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_14: Successfully list objects by begins_with. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1869,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object2);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "9047c32d-29a2-433b-bb3e-9831377dbd81",
      "parentUUID": "7797af55-00a2-4574-bd55-6371eb5ce02d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_013_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1141,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f9723161-5c10-4411-8797-153abb460d0e",
      "parentUUID": "9fc9d922-6c73-4d39-a932-9e1b988a6c67",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_013_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 748,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b1495276-6ef2-457c-b482-4e912a11e1f6",
      "parentUUID": "693a5595-c928-4ead-aa38-528c883ea2a2",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_013_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6775bbc1-0cab-4efc-adce-f1415513a65a",
      "parentUUID": "a125fb5b-d4d3-460f-b8dd-0a4475247e87",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_013_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "70e05c7f-eb2b-4bd3-914b-a439faaf5ecd",
      "parentUUID": "d595ca30-c9da-4643-9c66-f3040432793d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_013_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1677,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0a2456f8-3a52-4bc4-8c9b-c4c63bb0491e",
      "parentUUID": "2675aefa-3cc6-46b1-a42e-66ba5094e338",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_013_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "78fd6b94-4c84-4751-bcca-b87c582942db",
      "parentUUID": "38ebd62c-6648-4a71-8dd5-764bb8b38e19",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_013_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 793,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-comment\">// console.log(options);</span><br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1f580e79-06ea-4b7e-97bc-ad416017627f",
      "parentUUID": "8e0d6bd4-8375-46e3-bed5-2d5b3f22cf3c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_013_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 407,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "976605e1-502d-4b96-83ba-9001c8e8209d",
      "parentUUID": "bc8cb8fb-c7d0-4f12-908c-ac8fdfeb8486",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2ab8ef01-9e55-4637-91e0-88bc199ae4ec",
      "parentUUID": "585d3f7e-b3c8-4b5a-9091-c064668237ea",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1245,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7eb382f4-624a-4495-992e-c1723a51c709",
      "parentUUID": "8a90ff0b-e570-48ed-9ca6-6bdefe2ab741",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f1e6f66b-261e-4174-ba4b-907c9166d343",
      "parentUUID": "435c43a6-7e45-4a6c-80c4-47e9a01b31c1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 600,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "34c7cbac-a698-421c-aa09-2bd49a8eef3f",
      "parentUUID": "9024f0f5-e2a9-4245-afe1-9a9831300ae9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 972,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "038981bf-06c6-43c9-bfb5-8411cc8bc35b",
      "parentUUID": "5a54b5f7-6209-4660-8925-41f7a30b9027",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1000,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d420f9e2-6fb6-41d6-afcc-81a486f9e5fb",
      "parentUUID": "bcfca7e2-148c-4055-b393-655821b7502b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_013_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 776,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain, key: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "dff9d376-386d-4eb1-9a79-5bd66dce4329",
      "parentUUID": "a203b303-8ef2-4b60-80b2-32f37e0df8f0",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_013_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 1247,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// delete options.form.domain;</span><br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_object = <span class=\"hljs-string\">'invalid_object'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_object }, options.qs);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "98702695-b200-4a31-99d9-dd178a1bb9da",
      "parentUUID": "ac9c9e66-8c6b-450b-8bea-fd8d5d61d0a8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_013_13: Successfully deleted json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 3354,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_json  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_json, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage - object_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "32913ff2-7e4f-457a-b369-a0a2b2cd0cac",
      "parentUUID": "d5cce02b-cb91-4ef6-80e2-c091d207fdcd",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_013_14: Successfully deleted file object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 4421,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_jpg, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage - object_jpg_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "ae740ce0-b2bc-425b-84eb-ef287302e2ec",
      "parentUUID": "c6d725f4-c780-494d-98c0-cba7d23df556",
      "skipped": false
    },
    {
      "title": "Server should return Domain file usage equals all uploaded Objects usages",
      "fullTitle": "OSS_005_01: Successfully updated domain file_usage and object usage. Server should return Domain file usage equals all uploaded Objects usages",
      "timedOut": false,
      "duration": 13408,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">var</span> before_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object2_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object2_usage;<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        before_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload domain usage: '</span>, before_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object1 usage: '</span>, before_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object2 usage: '</span>, before_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object1, domain_id, <span class=\"hljs-string\">'image/png'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object2, domain_id, <span class=\"hljs-string\">'image/jpg'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object1 usage: '</span>, after_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object2 usage: '</span>, after_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload domain usage: '</span>, after_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  expect(after_upload_object1_usage + after_upload_object2_usage).to.equal(after_upload_domain_usage);<br>})<br>.then((data) =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "68a6c15b-2083-4d9c-88f1-d4cf798b8d42",
      "parentUUID": "83b60d38-f9a8-46a1-9f55-896b18d6f080",
      "skipped": false
    },
    {
      "title": "Server should return SQS is empty",
      "fullTitle": "OSS_014_01: No message in SQS. Server should return SQS is empty",
      "timedOut": false,
      "duration": 3712,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload)).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload).message).to.equal(<span class=\"hljs-string\">'SQS is empty'</span>);<br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "7613ad08-38fc-491d-8b16-7450320db00c",
      "parentUUID": "c48f7a97-9183-4df7-a8b3-9b8ccb0e06ec",
      "skipped": false
    },
    {
      "title": "Server should return Deleted SQS message.",
      "fullTitle": "OSS_014_02: No Object and S3 files. Server should return Deleted SQS message.",
      "timedOut": false,
      "duration": 8117,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "b1fcff07-8111-446e-a61f-f2761e97d628",
      "parentUUID": "efd98e2f-d01b-4e6b-b54f-f4e7c584efaa",
      "skipped": false
    },
    {
      "title": "Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
      "fullTitle": "OSS_014_03: Successfully deleted object items in DB and S3 object files under domain. Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
      "timedOut": false,
      "duration": 8353,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-comment\">// console.log(data);</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "24c8d72c-defd-4d3a-8e98-bf6d728fa0a5",
      "parentUUID": "a2c446be-55af-4fe4-8c6b-30383fb25313",
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_003_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1382,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "578892c4-6d8d-4eb3-a082-25f7498ad005",
      "parentUUID": "fffc2692-639d-40dc-86e2-614d60a9dd96",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_003_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1230,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "66e3c08a-daa8-467d-9a79-b3a7ad0ee071",
      "parentUUID": "57ce8a5e-03f5-4bfb-b60a-8a6ab73cfcd1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_003_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 763,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "df87af30-ef3b-4d21-bcc6-db87bbed1bf8",
      "parentUUID": "f999dcc4-9444-4d5f-89a9-b07e7c8329ad",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_003_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6f3c160a-a8cd-4308-9526-a4ad1e0fa196",
      "parentUUID": "034a917e-7e67-4eb0-af83-cfefd934a77a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_003_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 467,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6d33724e-c958-4c01-a30d-8c749868fdf3",
      "parentUUID": "9e5aa14d-3750-4b0b-b75d-04943a8c0cf7",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_003_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 2641,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "df0582be-9b8c-454f-b636-87639c51b35d",
      "parentUUID": "ffa1b817-9798-4fdd-bb31-73e63710bf45",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_003_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cbf434be-bdbe-49a7-97a1-7d9ed6688c78",
      "parentUUID": "2fc2f46b-6e01-4a49-b05b-30a7be72dfb3",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_003_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1681,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b9aef0ca-b16e-4aa0-82a8-37e454b0369b",
      "parentUUID": "d19bd25f-c760-4f01-aad7-c7c9cbe25a85",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
      "fullTitle": "OSS_003_09: If the domain param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.7\",\"message\":\"Missing Required Parameter: domain\"}",
      "timedOut": false,
      "duration": 1132,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.domain;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "df15342f-1f9d-4720-a151-0816eea93103",
      "parentUUID": "a0f7fd86-b81d-4b5d-baf1-3659e7f223c4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 369,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.domain = <span class=\"hljs-string\">'111_test_domain_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e970918b-455e-4a9b-9730-846767fa4bd8",
      "parentUUID": "f2ed5e83-554d-4e94-843f-3e4b2e9d401f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1200,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.domain = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d0e6343f-4a35-4923-a950-42bc1aea9198",
      "parentUUID": "68a78a62-4923-4438-8351-747f515f7794",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 735,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.form.domain = invalid_domain_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "3f096f5b-696d-451f-982d-738517846009",
      "parentUUID": "56888708-af84-4e08-bd3b-7721cc725811",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "fullTitle": "OSS_003_11: If the domain already exists. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "timedOut": false,
      "duration": 1003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4e9ec9b3-6a25-4240-9d5e-3b053db4d3b8",
      "parentUUID": "a0ec5ee0-4c3a-4452-8310-02daa47d26ae",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
      "fullTitle": "OSS_003_12: If it has already reached 2 domains limit. Server should return {\"httpStatus\":400,\"code\":\"400.12\",\"message\":\"Exceeded The Limit Of 2 Domains\"}",
      "timedOut": false,
      "duration": 2220,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_limit.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_limit.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4c074dc4-967a-4014-8fd9-0fd75eab829c",
      "parentUUID": "55b703f4-437d-4a39-8798-1c9a068ba1ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_003_13: Successfully created domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 5481,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> createDomains = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`create domains .....`</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      createDomains()<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>            testHelper.getDomain(cloud_id, app_id, options.form.domain, (err, domain) =&gt; {<br>              <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> reject(err);<br>              <span class=\"hljs-built_in\">console</span>.log(domain);<br>              expect(domain).to.have.all.keys([<br>                <span class=\"hljs-string\">'cloud_id-app_id'</span>,<br>                <span class=\"hljs-string\">'name'</span>,<br>                <span class=\"hljs-string\">'app_id'</span>,<br>                <span class=\"hljs-string\">'created_at'</span>,<br>                <span class=\"hljs-string\">'created_by'</span>,<br>                <span class=\"hljs-string\">'file_usage'</span>,<br>                <span class=\"hljs-string\">'id'</span>,<br>                <span class=\"hljs-string\">'json_usage'</span>,<br>                <span class=\"hljs-string\">'updated_at'</span>,<br>                <span class=\"hljs-string\">'updated_by'</span><br>              ]);<br>              customs.domain_id = domain.id;<br>              expect(domain[<span class=\"hljs-string\">'cloud_id-app_id'</span>]).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cloud_id}</span>-<span class=\"hljs-subst\">${app_id}</span>`</span>);<br>              expect(domain.name).to.equal(domain_name);<br>              resolve();<br>            }); <span class=\"hljs-comment\">// getDomain</span><br>          }); <span class=\"hljs-comment\">// Promise</span><br>        })<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
      "isRoot": false,
      "uuid": "81f8ae88-dcc3-45d4-9cbd-a67d28b2b5b6",
      "parentUUID": "258116e0-b8b2-4e1b-abf8-596139b1a45c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_010_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1503,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "14cd83fa-0e7f-4277-81cc-1f4aacd28ea1",
      "parentUUID": "fe74adf0-e27b-43e2-b55d-851d36b6c33b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_010_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 611,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7dff3a9e-8d02-4a3c-990f-0d92663e594f",
      "parentUUID": "5d83e199-ca97-4fbd-abc8-f3b23e50493c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_010_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1878,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "12d6c044-4143-403c-80ff-3f1fa3b66d3d",
      "parentUUID": "57d371a4-4b72-4061-99af-e835f683ac07",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_010_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1997,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a376c649-b003-4664-82a5-7d8ef1a2ad98",
      "parentUUID": "e56f3be0-f9d1-4f4f-bcf0-45236e9a2864",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_010_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1379,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8bb0db0c-2f5b-47d4-88ed-1216f55637d6",
      "parentUUID": "61b255d9-882e-4d18-9935-2c7c739582e6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_010_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 727,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form.access_token;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a04825e0-2134-4cbe-9c16-481f0a955df1",
      "parentUUID": "5c141c72-2bc8-483c-8198-52d985d0a2f2",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_010_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1381,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-built_in\">console</span>.log(options);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e10539c7-ba11-44bf-a0e2-3ff9fb5f4e79",
      "parentUUID": "9b0dbfc9-b3f0-4f46-8865-3d39624d1469",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_010_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1362,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "85971694-5617-47ed-a1b0-a231c179d75a",
      "parentUUID": "1f27972b-dbdb-49c9-b73b-46e8326df8a4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 764,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "02e42400-1cf6-481d-9a53-a91bd3a89a9b",
      "parentUUID": "a3de6cc0-41b6-4a97-aba8-e80ac291eaa8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 414,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "666a8570-4c3b-4788-b37e-3e7896a504b7",
      "parentUUID": "77ff0794-f93e-4245-bf8f-a3a3e2b116c5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 769,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c52a0af2-7c03-4e25-9f4d-f02d8d8f74e2",
      "parentUUID": "00f3d8e8-f1c1-4fad-89cd-b3d1d3567f64",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 380,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_domain = <span class=\"hljs-string\">'111_invalid_new_domain_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "baa12f47-fd6a-4284-9f06-8df8e515cef4",
      "parentUUID": "3608933e-d7e1-4514-827b-4c15752d7800",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 1534,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_domain = <span class=\"hljs-string\">'invalid_new_domain_*_name'</span>;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2355b5cd-dba9-425f-ad4b-2cdee8367fe5",
      "parentUUID": "ccf78d7b-4260-4024-b4a6-0a796f5bf2eb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "fullTitle": "Invalid new domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.10\",\"message\":\"Invalid new_domain\"}",
      "timedOut": false,
      "duration": 759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_new_domain_name = new_domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_new_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_new_domain_name += (<span class=\"hljs-string\">'_'</span> + new_domain_name);<br>        }<br>        options.form.new_domain = invalid_new_domain_name;<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, domain_name);<br>        <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2b22b9c9-539c-46b9-acb6-2c83f995cd65",
      "parentUUID": "a9203e6c-6fef-4c9a-97a6-5da26eb15bca",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_010_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> bodyParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(bodyParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1a966bf2-b5e9-47a2-b335-0b22424452a3",
      "parentUUID": "847ecf7f-8ee0-4113-822a-6ca6f3db7aba",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "fullTitle": "OSS_010_12: Cannot update domain item. New domain has already exist. Server should return {\"httpStatus\":400,\"code\":\"400.11\",\"message\":\"Domain Already Exists\"}",
      "timedOut": false,
      "duration": 1037,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "bf426596-f57e-41d5-b731-23fcb29d91af",
      "parentUUID": "edbfbf24-88c3-4168-b157-ed4cac14285a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_010_13: Successfully updated domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2317,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.form);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> updateDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>updateDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, new_domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">false</span>);<br>          expect(data.id).to.equal(domain_id);<br>          expect(data.name).to.equal(new_domain_name);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "8b83aeb2-8c66-409b-b4a7-2b0fb8e844d1",
      "parentUUID": "0432934f-9b13-4488-ad33-93770c64aecc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_006_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 278,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0cf1caa2-9825-4d57-842d-9a1324398726",
      "parentUUID": "6ca33348-5763-4a1d-a992-8835d3bb5d38",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_006_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 781,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a5fb5ce5-92b8-46ee-aff6-8916e4a49d45",
      "parentUUID": "cca49df5-cb8f-4a88-ab5b-0517c6273170",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_006_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 658,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c79b30dd-3104-4f96-8e1f-a71a03487c22",
      "parentUUID": "0bb1c158-f266-4abc-98f6-f9fad6b74709",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_006_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "53c41754-b525-4c46-b8a3-22cc40453aef",
      "parentUUID": "11b1c835-d983-4802-8694-96d34b1a50e5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_006_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f38dabcf-c1fd-4826-b04b-0796b38a847c",
      "parentUUID": "ab268227-931a-4137-9eba-31f836fa126b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_006_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 337,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "458da9eb-8932-41ba-b060-92ca9d663326",
      "parentUUID": "b8e8b68e-1cb3-4058-9331-4aaf39532953",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_006_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 475,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5290ac8b-3bb5-41ce-b007-3412948e42b4",
      "parentUUID": "e9121994-1d3d-44d5-86d8-49dcdf0f88cc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_006_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1636,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "dbecdbb9-82bb-4f17-aebc-9dc4f9d1c0b6",
      "parentUUID": "26d1d20c-60bb-4d83-b33a-b87ebcfafb41",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 334,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "810d3364-6ead-45a3-a823-08b521c517b1",
      "parentUUID": "5700b24f-d335-444a-aa4c-9ba451ead634",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1401,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "14ea8e32-ca64-45e1-b16a-55b6e84b6c36",
      "parentUUID": "87037c31-dfbb-40a6-8f9b-bef088e04e4e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1803,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "201210f3-5562-4bb1-90b1-437e6a103091",
      "parentUUID": "708e6086-1fa3-493c-a853-7d6335cd2f85",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_006_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 2204,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain_name'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "38f81168-d195-44f2-a26b-e212668c4b0b",
      "parentUUID": "cc013bab-836b-4a91-be56-42368e9ae5b6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_006_11: Successfully got domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1147,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "8f757d84-c9ca-4041-abf0-65250732492d",
      "parentUUID": "e47509e0-e930-4fe1-b8db-2e9af5d00163",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_008_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 361,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ead13358-ed0d-43c9-8415-aee4d70ef834",
      "parentUUID": "6a3b2b74-61d4-455f-b67f-a3f33d204ade",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_008_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 819,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "66d4bd93-d689-4ee6-ba11-aec98c144756",
      "parentUUID": "20fa95e6-40e4-43ea-9777-7fe331bbf150",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_008_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1759,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4b3316a3-6c70-46ea-9124-bc25e6adfdb8",
      "parentUUID": "0daab94d-ae93-46c1-80ef-8d4b2d15b723",
      "skipped": false
    },
    {
      "title": "Should return 'Missing Required Header: X-Signature'",
      "fullTitle": "OSS_008_04: If the X-Signature Header in request is missing. Should return 'Missing Required Header: X-Signature'",
      "timedOut": false,
      "duration": 1339,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6c35b52d-ebfc-4a94-a045-84d553736279",
      "parentUUID": "9d6bb93b-72ee-4067-a176-f442c9996c00",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_008_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 312,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "59ff6200-985b-46c7-9cb1-d2be09a5f6da",
      "parentUUID": "491f14af-7bef-4256-8f3f-d55e530df810",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_008_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 412,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7bc922d9-5d75-4370-8fa2-2cf06af6f537",
      "parentUUID": "c7fbc191-c291-411a-b65f-54e95368a478",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_008_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 898,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d57083e7-5210-4465-9916-c1e16f56d8f1",
      "parentUUID": "d31cf60b-2b0b-42c0-a212-51b055fc1fdd",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_008_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 1700,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b5ef659f-3d36-4961-b848-87dde6932b9d",
      "parentUUID": "2f6d9688-8288-4c49-868b-b336f5298db8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_008_10: Successfully list domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 722,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "be840ff8-9992-4d12-a287-db6dfb100a1f",
      "parentUUID": "3e7913dd-09bc-4b08-8793-b8be2e7f99b1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_012_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 290,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "620bca49-a518-4491-aaf8-bf82473208e9",
      "parentUUID": "bc0a7a60-1d0f-44e6-bd7a-be88bb03e14e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_012_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 479,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "dbd9e7d8-b7c6-43cd-b5c0-b5179bcbae0e",
      "parentUUID": "9f7f2ab1-0f0c-4795-93b8-353c5c0abc25",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_012_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1469,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "60ed1727-5421-4356-8b3d-1fdb3541eb61",
      "parentUUID": "5fd92072-0d2e-425d-a8eb-4a2aa972cfc7",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_012_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 615,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "13043828-7b8c-40b0-b204-13d37a7d116c",
      "parentUUID": "e533fd75-170e-4507-b594-a00572bdf536",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_012_05: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 2477,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d5eafc5f-543f-438e-8661-6d935a1712ef",
      "parentUUID": "d87a2a64-0943-432f-82de-c48e79d94426",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_012_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1076,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "72ca6e29-3bd6-4a92-8148-ed9cc291d208",
      "parentUUID": "77e5da18-9732-4953-9667-d9b63ceb1298",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_012_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1022,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "062ccfab-8827-43fc-8890-a899ecc2b406",
      "parentUUID": "7e007d96-3f52-4401-872c-537ef80f5ffb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_012_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 443,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "966e7b8f-5a12-423a-ac26-593f07a3e3d3",
      "parentUUID": "51735b25-6d71-4b99-a446-4ff1be8b63ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 310,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "18bfc963-f288-4d41-8dd3-94244691e8e8",
      "parentUUID": "1ee1cca4-ce42-40d2-ac88-068920fbbd2c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1083,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "45289efb-c4cd-43b5-8a87-abd6d999942a",
      "parentUUID": "e6f3035b-20c6-49d5-8ce5-a83faac88a67",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1353,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5c911c4a-7e45-423c-8178-1b29e268fea3",
      "parentUUID": "f9846923-4d4c-46f1-91c6-30615c9b2eb9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_012_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1995,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, invalid_domain);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cbf2c616-5c7e-4dbf-b27b-47c179f6f92b",
      "parentUUID": "d48ce91c-ac36-4d5f-a9eb-b6d2ffc7aa37",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_012_11: Successfully deleted domain item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 4165,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteDomain()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          <span class=\"hljs-comment\">// console.log(err.name)</span><br>          <span class=\"hljs-comment\">// console.log(err.message)</span><br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          <span class=\"hljs-comment\">// expect(data.id).to.equal(domain_id);</span><br>          <span class=\"hljs-comment\">// expect(data.name).to.equal(new_domain_name);</span><br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "be4284a5-1cfc-4083-a9e3-01eddff92148",
      "parentUUID": "b672b931-76a8-4b1e-bfda-bad5b983f55e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_004_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1197,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "85f9a7c9-23d8-4487-a657-d9253238171f",
      "parentUUID": "e72b71b2-eab0-485c-ba5f-8928cace9ff3",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_004_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 844,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "621e673e-005c-4799-acbb-c9f5ac5687f7",
      "parentUUID": "b5256359-88db-4115-b185-8d6adea2ac61",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_004_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 266,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6433059a-548b-4de0-af6e-f3aedb6b5d6c",
      "parentUUID": "d9488345-5e32-4455-a252-da37acc83670",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_004_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1150,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5461231f-73db-48a8-a8d5-8ae1679dc75d",
      "parentUUID": "de4bc6c4-8443-498a-ae4c-158bc9e345c4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_004_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 361,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f70bd63a-eb73-49c9-b586-dd314f951daa",
      "parentUUID": "6afcc243-89f5-4399-bb47-85640a7baacf",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_004_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 366,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7211481a-49ac-4357-9265-019e2ebcccbc",
      "parentUUID": "5783b571-9e45-4db8-8f6c-c935ec9145c1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 305,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b7086a2b-b846-4218-bb53-1fadcf3248ee",
      "parentUUID": "d23805fb-2bca-43b2-b072-14ef7a1cebf5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 907,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'key'</span>] = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "551863d3-eab3-4fb6-a18d-d172746b6288",
      "parentUUID": "c4b5d2bf-afeb-4942-900f-e4c297084704",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 287,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form[<span class=\"hljs-string\">'key'</span>] = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "264e889e-e4ae-41ce-b199-c57dba9d20e3",
      "parentUUID": "315bf232-fb01-4a02-8f5a-3a163941819b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "fullTitle": "OSS_004_08: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "timedOut": false,
      "duration": 477,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4954b153-edad-423c-ab2d-946c743af9b4",
      "parentUUID": "20572f58-74d1-42b9-9693-725cca6f161d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "fullTitle": "OSS_004_09: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "timedOut": false,
      "duration": 342,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "10a342f0-8afa-499c-8736-74ece4fb794a",
      "parentUUID": "eb53ba9e-5961-426d-9cea-0eb560f77a83",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "fullTitle": "OSS_004_10: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "timedOut": false,
      "duration": 478,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "715405e9-b63a-4a34-8aba-70458cb4245b",
      "parentUUID": "26bfe323-aa74-492f-88a9-90b6f3bcd485",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "fullTitle": "OSS_004_11: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "timedOut": false,
      "duration": 565,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "008b67f6-66fe-4e5f-8237-e94f91e056b2",
      "parentUUID": "6df0f4c9-3d50-4525-990d-73d3d56cfd50",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_004_12: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 372,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e34160be-48e5-46c8-bc4b-6b08329fbf18",
      "parentUUID": "30a7e485-314d-42c9-9c1a-7e0bf637a31e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_004_13: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 775,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8d3606f1-8d21-4cbb-bc96-550c215db33d",
      "parentUUID": "c2b843b6-14e2-4491-8f6e-f8a4a9ec2a86",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_004_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 870,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'domain'</span>] = <span class=\"hljs-string\">'unavailable_domain'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7f8bf403-eae9-4eb7-a853-0e6a582dc1c7",
      "parentUUID": "3bb8d804-2417-4ec7-a202-ef9b1120a404",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "fullTitle": "OSS_004_15: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "timedOut": false,
      "duration": 540,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9a85613a-c439-418a-9285-1fad7121f6d2",
      "parentUUID": "f31ad34c-f7d6-4eaf-a6bd-ed3c589a9ae5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_004_16: Successfully created json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1919,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8dc706ca-bfcc-460b-bf35-b3d1de5a6fa1",
      "parentUUID": "26eb36b0-c564-449b-9399-01cef3390020",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_004_17: Successfully created file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 2442,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`body: <span class=\"hljs-subst\">${body}</span>`</span>);<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`typeof data: <span class=\"hljs-subst\">${typeof body}</span>`</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "53ef0cf5-73eb-4536-917f-4dd6491b6027",
      "parentUUID": "716ea079-92e3-497a-adca-24affa0ee4f8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_011_01: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 255,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ae87bbf5-ebce-4a78-8850-65edb0fca375",
      "parentUUID": "21757952-87c0-439a-bd63-498ef9453f03",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_011_02: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1747,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.signature.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4b1149d0-8169-44d3-a1d2-a8e8f7ea9142",
      "parentUUID": "f3e21e63-b636-4631-9e8c-3142efee8004",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_011_03: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 384,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'certificate_serial'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "77aafa37-8a55-4845-87cb-4ad0aae830f7",
      "parentUUID": "c6daa9b6-f2d0-43d2-a111-c7b6758280fc",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_011_04: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 1303,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'certificate_serial'</span>] = <span class=\"hljs-string\">\"invalid_certificate_serial\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.certificate_serial.httpStatus);<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a056c8ec-635b-4134-89b1-4423b8f70a5e",
      "parentUUID": "95b98e46-5525-4e69-8271-c146c13e6c29",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_011_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">\"invalid_signature\"</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.signature.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a5bc9d02-91b2-49f0-b6c3-ca7c8a789314",
      "parentUUID": "61b4c9fa-4bb8-4ba7-aa6e-6426d38cb746",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_011_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'access_token'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.access_token.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "78e36e3f-c2dd-4286-8deb-38387b29d3ff",
      "parentUUID": "e6e67ba9-cac3-46d0-965d-f8d21c38430a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_011_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 1063,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_invalid.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f81f861f-1f8f-4e7c-bafb-aac61774e649",
      "parentUUID": "4a709326-5bd3-466c-88c9-1512003849e1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_011_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 967,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'access_token'</span>] = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.unauthorized.access_token_expired.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1f83fb35-b368-4240-83c0-6e19bcb41719",
      "parentUUID": "55b1b461-40dd-4e59-8fbe-c15131a84490",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1475,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = <span class=\"hljs-string\">\"123abc\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "1317387b-fc7b-40a7-bb98-e0829ad8eada",
      "parentUUID": "66da235b-755d-4aaf-9838-4dd71b37c166",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1447,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = <span class=\"hljs-string\">\"abc*\"</span>;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "37ac6065-f993-4c2a-84e3-8aec288b1040",
      "parentUUID": "ef8a4713-8290-4e6a-b9f8-9cb3c248e2a5",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.15\",\"message\":\"Invalid new_key\"}",
      "timedOut": false,
      "duration": 1003,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.form.new_key = invalid_key_name;<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            <span class=\"hljs-built_in\">console</span>.log(response.body);<br>            expect(response.statusCode).to.equal(ApiErrors.validationFailed.new_key.httpStatus);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.new_key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.new_key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "006ed362-f2f0-48f5-906e-60f4bb67c0f9",
      "parentUUID": "caefa5d4-a63d-4662-b360-3122d35bd827",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "fullTitle": "OSS_011_10: If the content_type param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.18\",\"message\":\"Missing Required Parameter: content_type\"}",
      "timedOut": false,
      "duration": 920,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content_type'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content_type.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content_type.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content_type.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "db45c904-316b-4b57-af90-3fa3200fa020",
      "parentUUID": "791cfac2-79da-4b97-997c-a10f4782545c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "fullTitle": "OSS_011_11: If the content_type param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.19\",\"message\":\"Invalid content_type\"}",
      "timedOut": false,
      "duration": 806,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">\"invalid_content_type\"</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.content_type.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content_type.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content_type.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "056413b2-d2f5-400d-ad77-8cb8aaa284ef",
      "parentUUID": "52816e94-f4b3-430f-adb3-ebaa79cf14f1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "fullTitle": "OSS_011_12: If the content param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.20\",\"message\":\"Missing Required Parameter: content\"}",
      "timedOut": false,
      "duration": 316,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      <span class=\"hljs-keyword\">delete</span> options.form[<span class=\"hljs-string\">'content'</span>];<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.missingRequiredParams.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "85f7ff0e-17fa-4c3c-86a3-0610a346e33a",
      "parentUUID": "4fbe726e-ca53-4ef2-97a9-27929151594e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "fullTitle": "OSS_011_13: If the content param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.21\",\"message\":\"Invalid content\"}",
      "timedOut": false,
      "duration": 1532,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>      options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">\"invalid_content\"</span>;<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.validationFailed.content.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.content.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.content.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4cee8d2d-22a4-477c-9c3f-2ea7bf0e3659",
      "parentUUID": "505135f6-e8e7-4a73-b945-53ede2a9c342",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_011_14: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 2006,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.setFormAndPath({ domain: <span class=\"hljs-string\">'unavailable_domain'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.domain.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "867f1cea-61a7-4f04-86be-a251123d7eee",
      "parentUUID": "05e6be11-d44e-4843-95f6-22da851e1ebb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_011_15: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 580,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.setFormAndPath({ key: <span class=\"hljs-string\">'unavailable_object'</span> });<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(response.body);<br>          expect(response.statusCode).to.equal(ApiErrors.notFound.object.httpStatus);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "5c8da732-9d2a-49fa-8e6f-258a9ddc22c5",
      "parentUUID": "ae6cea8f-bc46-47f1-984f-ccb27db17261",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "fullTitle": "OSS_011_16: If the key already exists. Server should return {\"httpStatus\":400,\"code\":\"400.16\",\"message\":\"Key Already Exists\"}",
      "timedOut": false,
      "duration": 1911,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form.new_key = customs.new_key;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(ApiErrors.validationFailed.key_duplicated.httpStatus);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>    expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key_duplicated.code);<br>    expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key_duplicated.message);<br>    done();<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "aab21438-97db-4066-84ec-73183e8f8a86",
      "parentUUID": "d0b41345-aca2-483a-b417-573017690d52",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2618,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "899e1a09-c1d9-45a1-95b0-235fe87aea9c",
      "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_17: Successfully updated json object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2692,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_key_2'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>      expect(item.usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 json object 的 usage 確實修改</span><br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">let</span> new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(options.form[<span class=\"hljs-string\">'content'</span>]), <span class=\"hljs-string\">'utf8'</span>);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`new_item_usage: <span class=\"hljs-subst\">${new_item_usage}</span>`</span>);<br>        expect(domainItem.json_usage).to.equal(new_item_usage); <span class=\"hljs-comment\">// 驗證 domain 的 json usage 確實修改</span><br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "a7b975d1-c0a0-4e3a-92ca-38e94655d3f3",
      "parentUUID": "61ccd2ba-32dd-4e83-93e1-733467158130",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_011_18: Successfully updated json object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 2717,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.new_key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(<span class=\"hljs-number\">0</span>);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage - customs.old_item_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b982bcf6-75be-46db-a552-53f6ac55a54f",
      "parentUUID": "dfe9a52d-9573-434e-9e67-c17a89f6aa21",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "fullTitle": "OSS_011_19: Successfully updated file object item to file object item. Server should return {\"httpStatus\":200,\"data\":{\"upload_url\":\"https://s3_upload_url\"}}",
      "timedOut": false,
      "duration": 3313,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'image/png'</span>;<br>options.form[<span class=\"hljs-string\">'new_key'</span>] = <span class=\"hljs-string\">'test_mocha_2.png'</span>;<br>options.setFormAndPath({ key: customs.file_key });<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`options: <span class=\"hljs-subst\">${JSON.stringify(options, null, 2)}</span>`</span>);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>    expect(parsedBody).to.have.keys(<span class=\"hljs-string\">'data'</span>);<br>    expect(parsedBody.data).to.have.keys(<span class=\"hljs-string\">'upload_url'</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form[<span class=\"hljs-string\">'new_key'</span>], (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.target_object_id = item.id;<br>      expect(item).to.have.property(<span class=\"hljs-string\">'usage'</span>);<br>      expect(item.usage).to.equal(customs.old_item_usage);<br>      expect(item).to.not.have.property(<span class=\"hljs-string\">'content'</span>);<br>      expect(item.domain_path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>);<br>      expect(item.path).to.equal(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${options.form.new_key}</span>`</span>);<br>      testHelper.getDomain(customs.cloud_id, customs.app_id, customs.domain_name, (err, domainItem) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>        expect(domainItem.file_usage).to.equal(customs.file_usage);<br>        expect(domainItem.json_usage).to.equal((customs.json_usage));<br>        done();<br>      });<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "002ab07e-5480-414b-aca7-466fa5feac95",
      "parentUUID": "6eaad0b0-e567-4ff5-8258-604c3531f29f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_007_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 479,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0834d091-3827-4eb6-9aa4-52dec1b916c1",
      "parentUUID": "93c599a6-5685-4434-836b-d162e5b140b6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_007_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 905,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "97cea22f-67fa-4508-8469-f75e975aa86c",
      "parentUUID": "c9e47621-c564-4841-89e1-ec14c09ce09e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_007_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 332,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8b90fe5d-8cfa-4b6e-8c75-c61cda63931a",
      "parentUUID": "bf2f72c9-0c91-4908-ba82-913f14631fe4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_007_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 492,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "110dfbb3-82f4-4ead-acfe-0a9579dfa7aa",
      "parentUUID": "60c72b52-0e28-4d9c-9e68-6cc0f742bb51",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_007_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 2017,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "be81b638-3ab5-4a04-908c-f25e8a600b68",
      "parentUUID": "99d038f1-bb1f-49ab-a0eb-33f6aed68d7d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_007_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 2048,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ef293cd8-3c8a-4cf5-a5c7-e008ae0f24ef",
      "parentUUID": "eab262af-3c59-4c3e-abd3-6a6b730b97bb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_007_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 915,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "ef8999ad-e861-4b28-a551-72912c62ee94",
      "parentUUID": "8c9e7b65-bab5-49e3-80d8-fb49cef059bb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_007_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 915,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "cc280a28-ebbe-41cb-9d57-2952852787d7",
      "parentUUID": "6c46c35b-4607-45fa-a5fa-f4a23c03dd1a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 877,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b4c828fd-2468-42c6-a080-62a66479870a",
      "parentUUID": "1afdfee0-d46f-4e65-82d6-d0158423cc5f",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 760,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0607d388-8c12-4d94-bad7-5428d4df02f6",
      "parentUUID": "4afb61fa-b260-4323-b6da-9885402dc8ed",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 737,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "fb46477a-7dd5-45d4-a594-131b00cfb243",
      "parentUUID": "8a83b054-5cbd-4f08-a475-0b6f02048d86",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1293,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "eeb46ca8-3afd-4509-b401-94bc2add8ab6",
      "parentUUID": "136f0326-eeec-4508-ac6b-c5c8a0efd398",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1597,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "2c3658a4-c823-4783-9158-dfe445052e89",
      "parentUUID": "d5874a01-3196-43d6-9fe5-42550de9c499",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 505,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "836f9bcc-5be4-40cb-9b43-e0b15e11bf6f",
      "parentUUID": "38854af9-266e-4e4f-b673-cadfee78d79a",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_007_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1097,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, object: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d96c8700-b5a1-429d-af32-880fe2f97f22",
      "parentUUID": "f7733929-cd3a-4ab8-9095-3dae48646a0d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_007_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 1099,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">const</span> invalid_object_name = <span class=\"hljs-string\">'invalid_object.jpg'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object_name}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: invalid_object_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>          request(options, (err, response, body) =&gt; {<br>            <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>            <span class=\"hljs-keyword\">else</span> {<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>              <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>              <span class=\"hljs-comment\">// console.log(body);</span><br>              expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>              expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>              expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>              resolve();<br>            }<br>          }); <span class=\"hljs-comment\">// request</span><br>        }); <span class=\"hljs-comment\">// Promise</span><br>      };<br>      getDomain()<br>        .then(() =&gt; done())<br>        .catch((err) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>          done(err);<br>        });",
      "isRoot": false,
      "uuid": "80a7542b-f2c9-40f4-8160-4edbb33b59ac",
      "parentUUID": "d4f026b3-a1af-46a3-918c-3c2912904874",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_007_13: Successfully got object file item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 2327,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_jpg }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"final result\"</span>);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        expect(isEmpty(body)).to.equal(<span class=\"hljs-literal\">false</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "fd86e7ac-7887-4fec-a9d6-545c1f99838c",
      "parentUUID": "68831042-6074-46ad-814e-05e048e94065",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_007_14: Successfully got object json item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1496,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, object: object_json }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(body);<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        <span class=\"hljs-comment\">// 因為在 testHelper.createObjectItem 內是填入 { \"message\" : \"OK\" }</span><br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.message).to.equal(<span class=\"hljs-string\">'OK'</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "cccfe348-8ae1-4682-bede-6e4b4212af47",
      "parentUUID": "0ac64404-5c04-4d0d-a310-d9f2c153e45e",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_009_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1549,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "19664009-9f19-4e84-9130-eb2d5ed8e569",
      "parentUUID": "30c904e5-a9e3-4a12-93e0-61084f9a5407",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_009_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 611,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "481d858a-38af-4575-872b-2a1d99e121bb",
      "parentUUID": "98c03b10-aaac-4643-bc91-feafeb176d71",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_009_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 1518,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "063ecc33-b859-4fe1-b743-875a0f811598",
      "parentUUID": "7f85e8e4-cf42-480f-ac75-3a84429d70b9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_009_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 1036,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c3fcf9ec-5eb6-451d-99d9-f422dbdb9b96",
      "parentUUID": "61d9b3ea-14b7-4804-9dca-e0e2c0e259ac",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_009_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1838,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7ae95f6c-d4a0-4057-8c25-70ac9585745c",
      "parentUUID": "6bdd4ceb-5454-4163-bb68-60db2dd7204b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_009_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1593,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d3aa229a-ed9b-457c-8227-1e1d7fcfc28d",
      "parentUUID": "34d1be57-85b0-4741-a15b-f4b22c9ee485",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_009_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 947,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "94a6f717-06e8-4dcc-a25e-30cbb759be24",
      "parentUUID": "58a73dc3-da96-48f2-ac2a-786ba4222ee8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_009_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 851,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, domain_name);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "9c878b4f-1628-471f-91d8-a902dae11150",
      "parentUUID": "1b135472-196c-4b74-a408-576733826183",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 960,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "88d2cf1c-ebdd-4d05-8019-b979b748468f",
      "parentUUID": "81fbb4ab-0bb9-4804-a233-369f089a4df4",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 2323,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8ea6878a-8e58-477d-b822-f165aa484b67",
      "parentUUID": "fc9b2ecb-36fd-44b7-a025-447aee5b9132",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 331,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, invalid_domain_name);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "c671860f-f44e-454a-aeef-ac0a0a7d349d",
      "parentUUID": "b3361054-30dc-450f-9d4e-5a233c257d20",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_009_10: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 1713,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>        expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>        expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "c14b398c-09b0-46b4-8dde-520ed4a87f7a",
      "parentUUID": "85b86fc9-1988-4fbb-b203-c4b5b5478094",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_12: Successfully list objects by all. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1017,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(parsedBody.data[<span class=\"hljs-number\">1</span>].key).to.equal(object2);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "89517c23-4f97-4988-ba6f-629d5b3cb015",
      "parentUUID": "0c51d41b-4f2e-4204-84cc-2f52f53c6137",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_13: Successfully list objects by key. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1681,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.key = object1;<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br><span class=\"hljs-built_in\">console</span>.log(queryParams);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-built_in\">console</span>.log(options);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object1);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "55724a4f-371f-4300-ac40-4a886f80ae73",
      "parentUUID": "34b9a89f-1c6d-4b27-831e-ff5dc32a99a1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_009_14: Successfully list objects by begins_with. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 1869,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.qs.begins_with = prefix;<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(parsedBody.data[<span class=\"hljs-number\">0</span>].key).to.equal(object2);<br>        expect(isEmpty(parsedBody.data[<span class=\"hljs-number\">1</span>])).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "0b77e15b-d07d-4608-be40-5b77bac63228",
      "parentUUID": "7797af55-00a2-4574-bd55-6371eb5ce02d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "fullTitle": "OSS_013_01: If the certificate_serial param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.2\",\"message\":\"Missing Required Parameter: certificate_serial\"}",
      "timedOut": false,
      "duration": 1141,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.certificate_serial;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "0aead7c7-fb66-4443-b0d7-182ba5aa2a8b",
      "parentUUID": "9fc9d922-6c73-4d39-a932-9e1b988a6c67",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "fullTitle": "OSS_013_02: If the certificate_serial param in request is invalid. Server should return {\"httpStatus\":400,\"code\":\"400.3\",\"message\":\"Invalid certificate_serial\"}",
      "timedOut": false,
      "duration": 748,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.certificate_serial = <span class=\"hljs-string\">'invalid_certificate_serial'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.certificate_serial.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.certificate_serial.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "fdb9a935-72db-46b1-a8e8-69ab7b8a07e9",
      "parentUUID": "693a5595-c928-4ead-aa38-528c883ea2a2",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "fullTitle": "OSS_013_03: If the X-Api-Key Header in request is missing. Server should return {\"httpStatus\":403,\"message\":\"Forbidden\"}",
      "timedOut": false,
      "duration": 297,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-API-Key'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">403</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.message).to.equal(ApiErrors.forbidden.x_api_key.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7771bc01-2d4a-4352-b7de-fd0ba0d55cc8",
      "parentUUID": "a125fb5b-d4d3-460f-b8dd-0a4475247e87",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "fullTitle": "OSS_013_04: If the X-Signature Header in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.0\",\"message\":\"Missing Required Header: X-Signature\"}",
      "timedOut": false,
      "duration": 302,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "bdecb415-5313-409f-b4f3-27652d868452",
      "parentUUID": "d595ca30-c9da-4643-9c66-f3040432793d",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "fullTitle": "OSS_013_05: If the signature in request failed the verification. Server should return {\"httpStatus\":400,\"code\":\"400.1\",\"message\":\"Invalid signature\"}",
      "timedOut": false,
      "duration": 1677,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = <span class=\"hljs-string\">'invalid_signaure'</span>;<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.validationFailed.signature.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.validationFailed.signature.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "4272687f-8e8c-46a6-aca4-b4f72ee49999",
      "parentUUID": "2675aefa-3cc6-46b1-a42e-66ba5094e338",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "fullTitle": "OSS_013_06: If the access_token param in request is missing. Server should return {\"httpStatus\":400,\"code\":\"400.6\",\"message\":\"Missing Required Parameter: access_token\"}",
      "timedOut": false,
      "duration": 1004,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">delete</span> options.qs.access_token;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.missingRequiredParams.access_token.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.missingRequiredParams.access_token.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7ef62d9e-1b18-4967-8659-75a376e9f33e",
      "parentUUID": "38ebd62c-6648-4a71-8dd5-764bb8b38e19",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "fullTitle": "OSS_013_07: If the access_token param in request is invalid. Server should return {\"httpStatus\":401,\"code\":\"401.0\",\"message\":\"Invalid access_token\"}",
      "timedOut": false,
      "duration": 793,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'invalid_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      <span class=\"hljs-comment\">// console.log(options);</span><br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_invalid.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_invalid.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "f84a3806-158e-4ee1-91e2-7fb1fbde5c8b",
      "parentUUID": "8e0d6bd4-8375-46e3-bed5-2d5b3f22cf3c",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "fullTitle": "OSS_013_08: If the access_token param in request is expired. Server should return {\"httpStatus\":401,\"code\":\"401.1\",\"message\":\"Access Token Expired\"}",
      "timedOut": false,
      "duration": 407,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "options.qs.access_token = <span class=\"hljs-string\">'expired_access_token'</span>;<br>      <span class=\"hljs-comment\">// delete options.headers['X-Signature'];</span><br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg }, options.qs);<br>      <span class=\"hljs-comment\">// console.log(queryParams);</span><br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">401</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.unauthorized.access_token_expired.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.unauthorized.access_token_expired.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "7dd31145-97d7-4646-b91b-c87edeeccdaa",
      "parentUUID": "bc8cb8fb-c7d0-4f12-908c-ac8fdfeb8486",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 340,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'111_invalid_domain_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "d035d394-f0ec-4296-8ed6-d44dd9a43ac8",
      "parentUUID": "585d3f7e-b3c8-4b5a-9091-c064668237ea",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1245,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_domain_name = <span class=\"hljs-string\">'invalid_test_domain_*_name'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "156c7440-16c0-4033-8414-e0afc6491f98",
      "parentUUID": "8a90ff0b-e570-48ed-9ca6-6bdefe2ab741",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "fullTitle": "Invalid domain name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.8\",\"message\":\"Invalid domain\"}",
      "timedOut": false,
      "duration": 1528,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> invalid_domain_name = domain_name;<br>        <span class=\"hljs-keyword\">while</span> (invalid_domain_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_domain_name += (<span class=\"hljs-string\">'_'</span> + domain_name);<br>        }<br>        <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain_name, key: object_jpg }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.domain.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.domain.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "8485b54c-185c-43d6-9790-297f45e3f820",
      "parentUUID": "435c43a6-7e45-4a6c-80c4-47e9a01b31c1",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name begins with number. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 600,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'111_invalid_object_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "94ffea09-d366-4f3d-871f-b95c900f79f2",
      "parentUUID": "9024f0f5-e2a9-4245-afe1-9a9831300ae9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name with unacceptable characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 972,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_*_name.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e8e64a3e-a216-4f8f-89ba-3a83b888ac71",
      "parentUUID": "5a54b5f7-6209-4660-8925-41f7a30b9027",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "fullTitle": "Invalid object name over 128 characters. Server should return {\"httpStatus\":400,\"code\":\"400.14\",\"message\":\"Invalid key\"}",
      "timedOut": false,
      "duration": 1000,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>        <span class=\"hljs-keyword\">let</span> invalid_key_name = <span class=\"hljs-string\">'invalid_object_name'</span><br>        <span class=\"hljs-keyword\">while</span> (invalid_key_name.length &lt; <span class=\"hljs-number\">129</span>) {<br>          invalid_key_name += (<span class=\"hljs-string\">'_'</span> + invalid_key_name);<br>        }<br>        invalid_key_name += <span class=\"hljs-string\">'.jpg'</span><br>        options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_key_name}</span>`</span>);<br>        <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_key_name }, options.qs);<br>        options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>        request(options, (err, response, body) =&gt; {<br>          <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>          <span class=\"hljs-keyword\">else</span> {<br>            expect(response.statusCode).to.equal(<span class=\"hljs-number\">400</span>);<br>            <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>            expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>            expect(parsedBody.code).to.equal(ApiErrors.validationFailed.key.code);<br>            expect(parsedBody.message).to.equal(ApiErrors.validationFailed.key.message);<br>            done();<br>          }<br>        }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "b80efcd8-205e-4137-9213-0e52e61b555c",
      "parentUUID": "bcfca7e2-148c-4055-b393-655821b7502b",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "fullTitle": "OSS_013_11: Cannot find domain. Server should return {\"httpStatus\":404,\"code\":\"404.0\",\"message\":\"Domain Not Found\"}",
      "timedOut": false,
      "duration": 776,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_domain = <span class=\"hljs-string\">'invalid_domain'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${invalid_domain}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: invalid_domain, key: object_jpg }, options.qs);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "e2993f0a-e5e7-415e-ae92-7d4a2b810c67",
      "parentUUID": "a203b303-8ef2-4b60-80b2-32f37e0df8f0",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "fullTitle": "OSS_013_12: Cannot find object. Server should return {\"httpStatus\":404,\"code\":\"404.1\",\"message\":\"Object Not Found\"}",
      "timedOut": false,
      "duration": 1247,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-comment\">// delete options.form.domain;</span><br>      <span class=\"hljs-keyword\">delete</span> options.headers[<span class=\"hljs-string\">'X-Signature'</span>];<br>      <span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>      <span class=\"hljs-keyword\">let</span> invalid_object = <span class=\"hljs-string\">'invalid_object'</span>;<br>      options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${invalid_object}</span>`</span>);<br>      <span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: invalid_object }, options.qs);<br>      <span class=\"hljs-built_in\">console</span>.log(queryParams);<br>      options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br>      request(options, (err, response, body) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>        <span class=\"hljs-keyword\">else</span> {<br>          expect(response.statusCode).to.equal(<span class=\"hljs-number\">404</span>);<br>          <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>          expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'code'</span>, <span class=\"hljs-string\">'message'</span>]);<br>          expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);<br>          expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);<br>          done();<br>        }<br>      }); <span class=\"hljs-comment\">// request</span>",
      "isRoot": false,
      "uuid": "6d63da4c-c7de-472d-b1e6-867aea92c669",
      "parentUUID": "ac9c9e66-8c6b-450b-8bea-fd8d5d61d0a8",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_013_13: Successfully deleted json object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 3354,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_json}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_json  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_json, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage - object_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "53175098-d921-461e-a67a-f1d41651cb77",
      "parentUUID": "d5cce02b-cb91-4ef6-80e2-c091d207fdcd",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_013_14: Successfully deleted file object item. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 4421,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${domain_name}</span>/<span class=\"hljs-subst\">${object_jpg}</span>`</span>);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name, key: object_jpg  }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> deleteObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>}; <span class=\"hljs-comment\">// function</span><br>deleteObject()<br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getObject(cloud_id, app_id, domain_id, object_jpg, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; {<br>    <span class=\"hljs-comment\">// console.log(data)</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>      testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>        <span class=\"hljs-keyword\">if</span> (err) {<br>          <span class=\"hljs-built_in\">console</span>.log(err)<br>          reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>        } <span class=\"hljs-keyword\">else</span> {<br>          <span class=\"hljs-built_in\">console</span>.log(data);<br>          expect(data.file_usage).to.equal(domain_file_usage - object_jpg_usage);<br>          expect(data.json_usage).to.equal(domain_json_usage);<br>          resolve(data);<br>        }<br>      }) <span class=\"hljs-comment\">// testHealper</span><br>    }); <span class=\"hljs-comment\">// Promise</span><br>  }) <span class=\"hljs-comment\">//then</span><br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "isRoot": false,
      "uuid": "02ccfdaa-99ad-41e4-b112-6db25831398d",
      "parentUUID": "c6d725f4-c780-494d-98c0-cba7d23df556",
      "skipped": false
    },
    {
      "title": "Server should return Domain file usage equals all uploaded Objects usages",
      "fullTitle": "OSS_005_01: Successfully updated domain file_usage and object usage. Server should return Domain file usage equals all uploaded Objects usages",
      "timedOut": false,
      "duration": 13408,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">var</span> before_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_domain_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> before_upload_object2_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object1_usage;<br><span class=\"hljs-keyword\">var</span> after_upload_object2_usage;<br><span class=\"hljs-keyword\">let</span> getDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        before_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload domain usage: '</span>, before_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>getDomain()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object1 usage: '</span>, before_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        before_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'before upload object2 usage: '</span>, before_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object1, domain_id, <span class=\"hljs-string\">'image/png'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    <span class=\"hljs-comment\">// this.timeout(20000);</span><br>    testHelper.uploadS3ObjectItem(cloud_id, app_id, object2, domain_id, <span class=\"hljs-string\">'image/jpg'</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object1, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object1_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object1 usage: '</span>, after_upload_object1_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getObject(cloud_id, app_id, domain_id, object2, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_object2_usage = data.usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload object2 usage: '</span>, after_upload_object2_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data)<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.getDomain(cloud_id, app_id, domain_name, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// console.log(data);</span><br>        after_upload_domain_usage = data.file_usage;<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'after upload domain usage: '</span>, after_upload_domain_usage);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  expect(after_upload_object1_usage + after_upload_object2_usage).to.equal(after_upload_domain_usage);<br>})<br>.then((data) =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "03901115-00e6-4d48-99fd-6db0d8b0121e",
      "parentUUID": "83b60d38-f9a8-46a1-9f55-896b18d6f080",
      "skipped": false
    },
    {
      "title": "Server should return SQS is empty",
      "fullTitle": "OSS_014_01: No message in SQS. Server should return SQS is empty",
      "timedOut": false,
      "duration": 3712,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(data);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload)).to.have.all.keys([<span class=\"hljs-string\">'message'</span>]);<br>  expect(<span class=\"hljs-built_in\">JSON</span>.parse(data.Payload).message).to.equal(<span class=\"hljs-string\">'SQS is empty'</span>);<br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "5eea4c7d-e28c-4b3a-825d-cd06d4c11f44",
      "parentUUID": "c48f7a97-9183-4df7-a8b3-9b8ccb0e06ec",
      "skipped": false
    },
    {
      "title": "Server should return Deleted SQS message.",
      "fullTitle": "OSS_014_02: No Object and S3 files. Server should return Deleted SQS message.",
      "timedOut": false,
      "duration": 8117,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "b5d6cb60-545c-4240-9653-2aa9a7c3bdcf",
      "parentUUID": "efd98e2f-d01b-4e6b-b54f-f4e7c584efaa",
      "skipped": false
    },
    {
      "title": "Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
      "fullTitle": "OSS_014_03: Successfully deleted object items in DB and S3 object files under domain. Server should return Successfully deleted Object items in DB and Object files in S3 and deleted SQS message.",
      "timedOut": false,
      "duration": 8353,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">30000</span>);<br><span class=\"hljs-keyword\">let</span> invokeHousekeeping = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.invokeLambda(LAMBDA_FUNCTION, <span class=\"hljs-literal\">null</span>, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHelper.invokeLambda</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>invokeHousekeeping()<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.queryObject(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(data);<br>        expect(isEmpty(data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-comment\">// console.log(data);</span><br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.listS3Objects(cloud_id, app_id, domain_id, (err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Contents)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        expect(data.KeyCount).to.equal(<span class=\"hljs-number\">0</span>);<br>        resolve(data);<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then((data) =&gt; {<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    testHelper.receiveSQSMessage((err, data) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) {<br>        <span class=\"hljs-built_in\">console</span>.log(err)<br>        reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      } <span class=\"hljs-keyword\">else</span> {<br>        expect(isEmpty(data.Messages)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }) <span class=\"hljs-comment\">// testHealper</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>})<br>.then(() =&gt; done())<br>.catch((err) =&gt; {<br>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>  done(err);<br>});",
      "isRoot": false,
      "uuid": "d0dad34f-9102-4535-aca0-d0bc698f3437",
      "parentUUID": "a2c446be-55af-4fe4-8c6b-30383fb25313",
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
      "fullTitle": "OSS_008_09: Successfully list empty domain item. Server should return {\"httpStatus\":200,\"data\":[]}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.qs, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listDomain = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.domain.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.domain.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listDomain()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "err": {
        "name": "AssertionError",
        "message": "expected 404 to equal 200",
        "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listDomains.js:380:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "6fb8deaa-7e53-4043-9fe3-8b23c01f1a71",
      "parentUUID": "2d87a24c-d21b-4236-95a0-b161f3d9ceeb",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_004_18: Successfully created json object item with content contains chinese words. Server should return {\"httpStatus\":200}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "options.form[<span class=\"hljs-string\">'content_type'</span>] = <span class=\"hljs-string\">'application/json'</span>;<br>options.form[<span class=\"hljs-string\">'content'</span>] = <span class=\"hljs-string\">'{\"key\":\"一二三\"}'</span>;<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(options.form, options.headers, PRIVATE_KEY_NAME);<br>request(options, (err, response, body) =&gt; {<br>  <span class=\"hljs-keyword\">if</span> (err) done(err); <span class=\"hljs-comment\">// an error occurred</span><br>  <span class=\"hljs-keyword\">else</span> {<br>    <span class=\"hljs-built_in\">console</span>.log(response.body);<br>    expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>    testHelper.getObject(customs.cloud_id, customs.app_id, customs.domain_id, options.form.key, (err, item) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> done(err);<br>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`item: <span class=\"hljs-subst\">${JSON.stringify(item, null, 2)}</span>`</span>);<br>      customs.object_id = item.id;<br>      done();<br>    });<br>  }<br>}); <span class=\"hljs-comment\">// request</span>",
      "err": {
        "name": "AssertionError",
        "message": "expected 400 to equal 200",
        "stack": "AssertionError: expected 400 to equal 200<br>    at Request._callback (test/createObject.js:763:44)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "8aaa0d9a-1e97-446e-8f97-53d641f8e1f7",
      "parentUUID": "1e14d21c-e594-43fb-b8fc-23a008e79ba6",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200}",
      "fullTitle": "OSS_011_20: Successfully updated file object item to json object item. Server should return {\"httpStatus\":200}",
      "timedOut": true,
      "duration": 6000,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">let</span> params = {<br>        content_type: <span class=\"hljs-string\">'application/json'</span>,<br>        content: <span class=\"hljs-string\">'{\\\"key1\\\": \\\"value1\\\", \\\"key2\\\": \\\"value2\\\"}'</span><br>      }<br>      customs.new_item_usage = Buffer.byteLength(<span class=\"hljs-built_in\">JSON</span>.stringify(params.content), <span class=\"hljs-string\">'utf8'</span>);<br>      <span class=\"hljs-keyword\">let</span> expectedCode = <span class=\"hljs-number\">200</span>;<br>      <span class=\"hljs-keyword\">let</span> expectedBody = { <span class=\"hljs-string\">\"data\"</span>: { <span class=\"hljs-string\">\"upload_url\"</span>: {} } };<br>      <span class=\"hljs-keyword\">let</span> path = { domain: customs.domain_name, key: customs.file_key };<br>      setRequest(options, params, path)<br>        .then((options) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> sendRequest(options);<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> assertResponse(data, expectedCode)<br>        })<br>        .then((data) =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getObjectItem(customs.cloud_id, customs.app_id, customs.domain_id, customs.file_key);<br>        })<br>        .then((objItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`objItem: <span class=\"hljs-subst\">${JSON.stringify(objItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> properties = [<span class=\"hljs-string\">'usage'</span>, <span class=\"hljs-string\">'content'</span>, <span class=\"hljs-string\">'content_type'</span>, <span class=\"hljs-string\">'domain_path'</span>, <span class=\"hljs-string\">'path'</span>, <span class=\"hljs-string\">'created_at'</span>, <span class=\"hljs-string\">'updated_at'</span>];<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            usage: customs.new_item_usage,<br>            content: options.form[<span class=\"hljs-string\">'content'</span>],<br>            domain_path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>`</span>,<br>            path: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${customs.cloud_id}</span>/<span class=\"hljs-subst\">${customs.app_id}</span>/<span class=\"hljs-subst\">${customs.domain_id}</span>/<span class=\"hljs-subst\">${customs.file_key}</span>`</span><br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(objItem, properties, expected_values);<br>        })<br>        .then(() =&gt; {<br>          <span class=\"hljs-keyword\">return</span> getDomainItem(customs.cloud_id, customs.app_id, customs.domain_name);<br>        })<br>        .then((domainItem) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`domainItem: <span class=\"hljs-subst\">${JSON.stringify(domainItem, null, 2)}</span>`</span>);<br>          <span class=\"hljs-keyword\">let</span> expected_values = {<br>            file_usage: (customs.original_domain_file_usage - customs.old_item_usage),<br>            json_usage: (customs.original_domain_json_usage + customs.new_item_usage)<br>          }<br>          <span class=\"hljs-keyword\">return</span> assertItem(domainItem, <span class=\"hljs-literal\">null</span>, expected_values);<br>        })<br>        .then(() =&gt; {<br>          done();<br>        })<br>        .catch((error) =&gt; {<br>          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`error: <span class=\"hljs-subst\">${error}</span>`</span>);<br>          done(error);<br>        })",
      "err": {
        "name": "Error",
        "message": "Timeout of 6000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
        "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">6000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves."
      },
      "isRoot": false,
      "uuid": "359b1029-a540-4189-b12e-5f002fa831a6",
      "parentUUID": "de7b87c4-9556-4f49-ae5d-8777c91a0ca9",
      "skipped": false
    },
    {
      "title": "Server should return {\"httpStatus\":200,\"data\":[]}",
      "fullTitle": "OSS_009_11: Successfully list empty object item. Server should return {\"httpStatus\":200,\"data\":[]}",
      "timedOut": false,
      "duration": 0,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "<span class=\"hljs-keyword\">this</span>.timeout(<span class=\"hljs-number\">12000</span>);<br><span class=\"hljs-keyword\">const</span> regexp = <span class=\"hljs-regexp\">/{.*}/</span>;<br>options.url = options.url.replace(regexp, domain_name);<br><span class=\"hljs-keyword\">let</span> queryParams = <span class=\"hljs-built_in\">Object</span>.assign({ domain: domain_name }, options.qs);<br>options.headers[<span class=\"hljs-string\">'X-Signature'</span>] = signatureGenerator.generate(queryParams, options.headers, PRIVATE_KEY_NAME);<br><span class=\"hljs-keyword\">let</span> listObject = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{<br>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>((resolve, reject) =&gt; {<br>    request(options, (err, response, body) =&gt; {<br>      <span class=\"hljs-keyword\">if</span> (err) reject(err); <span class=\"hljs-comment\">// an error occurred</span><br>      <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-comment\">// expect(response.statusCode).to.equal(404);</span><br>        <span class=\"hljs-comment\">// let parsedBody = JSON.parse(body);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody).to.have.all.keys(['code', 'message']);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.code).to.equal(ApiErrors.notFound.object.code);</span><br>        <span class=\"hljs-comment\">// expect(parsedBody.message).to.equal(ApiErrors.notFound.object.message);</span><br>        <span class=\"hljs-comment\">// resolve();</span><br>        expect(response.statusCode).to.equal(<span class=\"hljs-number\">200</span>);<br>        <span class=\"hljs-keyword\">let</span> parsedBody = <span class=\"hljs-built_in\">JSON</span>.parse(body);<br>        <span class=\"hljs-built_in\">console</span>.log(parsedBody);<br>        expect(parsedBody).to.have.all.keys([<span class=\"hljs-string\">'data'</span>]);<br>        expect(isEmpty(parsedBody.data)).to.equal(<span class=\"hljs-literal\">true</span>);<br>        resolve();<br>      }<br>    }); <span class=\"hljs-comment\">// request</span><br>  }); <span class=\"hljs-comment\">// Promise</span><br>};<br>listObject()<br>  .then(() =&gt; done())<br>  .catch((err) =&gt; {<br>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Unable to read item. Error JSON:\"</span>, <span class=\"hljs-built_in\">JSON</span>.stringify(err, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>));<br>    done(err);<br>  });",
      "err": {
        "name": "AssertionError",
        "message": "expected 404 to equal 200",
        "stack": "AssertionError: expected 404 to equal 200<br>    at Request._callback (test/listObjects.js:561:46)<br>    at Request.self.callback (node_modules/request/request.js:188:22)<br>    at Request.&lt;anonymous&gt; (node_modules/request/request.js:1171:10)<br>    at IncomingMessage.&lt;anonymous&gt; (node_modules/request/request.js:1091:12)<br>    at endReadableNT (_stream_readable.js:905:12)"
      },
      "isRoot": false,
      "uuid": "9f2816b8-2ab2-4fcd-bf46-430bdfe7bb87",
      "parentUUID": "233b7ec8-75f9-4324-ad74-8be8826234c5",
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}